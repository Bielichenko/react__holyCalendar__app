{"version":3,"sources":["store/calendarSlice.ts","store/index.ts","utils/helpers/getMonthNumberString.ts","utils/helpers/getDateString.ts","utils/helpers/getDayOfWeekNumber.tsx","utils/helpers/makeDateObject.ts","utils/helpers/getDaysFromMonth.ts","hook.ts","components/CalendarCell/CalendarCell.tsx","utils/helpers/checkIsThisDayIsToday.ts","utils/helpers/sortEventsByTime.ts","utils/helpers/sendDataToServer.ts","utils/helpers/getBeginTimeString.ts","components/UpdateForm/UpdateForm.tsx","components/Calendar/Calendar.tsx","utils/helpers/getDaysList.ts","utils/helpers/createMonthObject.ts","utils/helpers/getMonthName.ts","utils/helpers/setDateFilterToLS.ts","utils/helpers/getYearAndMonthFromDate.ts","utils/helpers/createDateFilter.ts","components/DateFilter/DateFilter.tsx","utils/helpers/createCurrMonthObject.ts","components/Form/Form.tsx","components/EventButton/EventButton.tsx","utils/helpers/getDateFilterFromLS.ts","utils/helpers/getInitialDateFilter.ts","App.tsx","utils/helpers/getDataFromServer.ts","index.tsx"],"names":["calendarSlice","createSlice","name","initialState","dateFilter","currMonth","userEvents","isAddingEvent","editingEvent","reducers","setDateFilter","state","action","payload","setCurrMonth","setUserEvents","setIsAddingEvent","setEditingEvent","actions","store","configureStore","reducer","calendar","calendarReducer","getMonthNumberString","monthIndex","monthNumber","toFixed","length","getDateString","date","dayString","toString","getMonth","dayArray","split","console","log","dayNumber","year","time","monthNumberString","slice","getDayOfWeekNumber","dayOfWeek","makeDayObject","dayDate","isFromSelectedMonth","undefined","monthName","dayOfWeekNumber","dateString","dayEvents","filter","event","beginDate","dayObj","getDaysFromMonth","month","kindOfMonth","needDayFromThisMonth","startNumber","lastNumber","daysFromMonth","daysAmount","i","Date","push","useAppDispatch","useDispatch","useAppSelector","useSelector","CalendarCell","day","dispatch","isThisDayIsToday","checkIsThisDayIsToday","eventSelectionHandler","sortedDayEvents","sort","eventA","eventB","sumMinutesA","Infinity","sumMinutesB","beginTime","hoursA","minutesA","parseInt","hoursB","minutesB","className","cn","map","onClick","onKeyDown","role","tabIndex","title","Math","random","sendDataToServer","updatedEvents","localStorage","setItem","JSON","stringify","getBeginTimeString","dateObject","UpdateForm","usersEvent","useState","setTitle","description","setDescription","setBeginDate","setBeginTime","useEffect","closeEvent","deleteEvent","id","onSubmit","preventDefault","updatedEvent","editedAt","notUpdatedEvents","eventFromStorage","onKeyUp","createdAt","Stack","direction","spacing","LocalizationProvider","dateAdapter","AdapterDayjs","TextField","label","variant","required","color","value","onChange","e","target","multiline","DesktopDatePicker","inputFormat","beginDateString","$d","renderInput","inputProps","error","TimePicker","beginTimeString","params","Button","type","Calendar","dayList","daysFromCurrentMonth","firstDayOfWeekOfCurrentMonth","daysFromPreviousMonth","prevMonth","needDaysFromNextMonth","daysFromNextMonth","nextMonth","getDaysList","createMonthObject","getFullYear","getMonthName","monthShortName","monthFullName","getDate","fullDate","fullDateReverse","dateWithMonthName","setDateFilterToLS","newDateFilter","getYearAndMonthFromDate","createDateFilter","DateFilter","selectedMonth","initialValueForDatePicker","dayjs","datePicker","setDatePicker","isDatePicker","setIsDatePicker","minDate","maxDate","newSelectedMonth","currentMonthDate","prevMonthDate","futureMonthDate","currentMonthObject","prevMonthObject","futureMonthObject","createCurrMonthObject","next","selectedMonthIndex","updatedDateFilter","prev","datePickerHandler","newDate","Grid","container","item","xs","md","MonthPicker","YearPicker","Form","closeForm","uniqueId","newEvent","EventButton","startAdditingNewEvent","getDateFilterFromLS","filtersFromLS","getItem","parse","App","eventsFromServer","preparedDate","dataFromServer","getDataFromServer","dateFilterFromLS","href","rel","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0f1fcccf.chunk.js","sourcesContent":["/* eslint-disable*/\n\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { createCurrMonthObject } from '../utils/helpers/createCurrMonthObject';\nimport { getDataFromServer } from '../utils/helpers/getDataFromServer';\nimport { IDateFilter } from '../types/IDateFilter';\nimport { IEvent } from '../types/IEvent';\nimport { IMonthRoot } from '../types/IMonth';\n\ntype calendar = {\n  dateFilter: IDateFilter | null;\n  currMonth: IMonthRoot | null;\n  userEvents: IEvent[];\n  isAddingEvent: boolean;\n  editingEvent: IEvent | null;\n};\n\nconst initialState: calendar = {\n  dateFilter: null,\n  currMonth: null,\n  userEvents: [],\n  isAddingEvent: false,\n  editingEvent: null,\n};\n\nconst calendarSlice = createSlice({\n  name: 'calendar',\n  initialState,\n  reducers: {\n    setDateFilter(state, action: PayloadAction<IDateFilter>) {\n      state.dateFilter = action.payload;\n    },\n    setCurrMonth(state, action: PayloadAction<IMonthRoot>) {\n      state.currMonth = action.payload;\n    },\n    setUserEvents(state, action: PayloadAction<IEvent[]>) {\n      state.userEvents = action.payload;\n    },\n    setIsAddingEvent(state, action: PayloadAction<boolean>) {\n      state.isAddingEvent = action.payload;\n    },\n    setEditingEvent(state, action: PayloadAction<IEvent | null>) {\n      state.editingEvent = action.payload;\n    },\n  },\n});\n\nexport const {\n  setDateFilter,\n  setCurrMonth,\n  setUserEvents,\n  setIsAddingEvent,\n  setEditingEvent,\n} = calendarSlice.actions;\n\nexport default calendarSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport calendarReducer from './calendarSlice';\n\nconst store = configureStore({\n  reducer: {\n    calendar: calendarReducer,\n  },\n});\n\nexport default store;\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","export function getMonthNumberString(monthIndex : number) {\n  const monthNumber = (monthIndex + 1).toFixed();\n\n  if (monthNumber.length > 1) {\n    return monthNumber;\n  }\n\n  return `0${monthNumber}`;\n}\n","/* eslint-disable no-console */\nimport { getMonthNumberString } from './getMonthNumberString';\n\nexport function getDateString(date: Date) {\n  const dayString = date.toString();\n  const monthIndex = date.getMonth();\n  const dayArray: (string)[] = dayString.split(' ');\n\n  console.log(dayArray, 'dayArray');\n\n  const [, , dayNumber, year, time] = dayArray;\n  const monthNumberString = getMonthNumberString(monthIndex);\n\n  const dateString = `${year}-${monthNumberString}-${dayNumber} ${time.slice(0, 5)}`;\n\n  return dateString;\n}\n","export function getDayOfWeekNumber(dayOfWeek: string | number) {\n  switch (dayOfWeek) {\n    case 'Mon':\n      return 1;\n    case 'Tue':\n      return 2;\n    case 'Wed':\n      return 3;\n    case 'Thu':\n      return 4;\n    case 'Fri':\n      return 5;\n    case 'Sat':\n      return 6;\n    case 'Sun':\n      return 7;\n    default:\n      return 1;\n  }\n}\n","/*eslint-disable*/\n\nimport { IEvent } from '../../types/IEvent';\n// import { getCurrentDate } from './getCurrentDate';\nimport { getDateString } from './getDateString';\nimport { getDayOfWeekNumber } from './getDayOfWeekNumber';\nimport { getMonthNumberString } from './getMonthNumberString';\n\nexport function makeDayObject(\n  dayDate: Date, \n  userEvents: IEvent[],\n  isFromSelectedMonth : boolean | undefined = undefined ,\n  ) {\n  const dayString = dayDate.toString();\n  const dayArray: (string|number)[] = dayString.split(' ');\n  const monthIndex = dayDate.getMonth();\n  const [dayOfWeek, monthName, dayNumber, year] = dayArray;\n  const monthNumberString = getMonthNumberString(monthIndex);\n  const dayOfWeekNumber = getDayOfWeekNumber(dayOfWeek);\n\n  const dateString = getDateString(dayDate);\n  const dayEvents = userEvents.filter((event: IEvent) => event.beginDate === dateString);\n\n  const dayObj = {\n    year,\n    monthIndex,\n    monthNumberString,\n    monthName,\n    dayNumber,\n    dayOfWeekNumber,\n    dayOfWeek,\n    dateString,\n    dayEvents,\n    isFromSelectedMonth,\n  };\n\n  return dayObj;\n}\n","/* eslint-disable no-console */\n/* eslint-disable prefer-const */\n/*eslint-disable*/\nimport { IDay } from '../../types/IDay';\nimport { IEvent } from '../../types/IEvent';\nimport { IMonth, IMonthRoot } from '../../types/IMonth';\nimport { makeDayObject } from './makeDateObject';\n\nexport function getDaysFromMonth(\n  month: IMonth | IMonthRoot,\n  kindOfMonth: string,\n  needDayFromThisMonth: number,\n  userEvents: IEvent[],\n) {\n  let startNumber = 1;\n  let lastNumber = needDayFromThisMonth;\n  let year = month.year;\n  let isFromSelectedMonth = true;\n\n  const daysFromMonth: IDay[] = [];\n\n  if (kindOfMonth === 'previousMonth') {\n    isFromSelectedMonth = false;\n    startNumber = +month.daysAmount - needDayFromThisMonth + 1;\n    lastNumber = +month.daysAmount;\n\n    if (+month.monthIndex === 11)\n    year = year - 1\n  }\n\n  if (kindOfMonth === 'nextMonth') {\n    isFromSelectedMonth = false;\n    lastNumber = needDayFromThisMonth;\n\n    if (+month.monthIndex === 0)\n    year = year + 1\n  }\n\n  for (let i = startNumber; i <= lastNumber; i += 1) {\n    const dayDate = new Date(year, +month.monthIndex, i);\n\n    const dayObj = makeDayObject(dayDate, userEvents, isFromSelectedMonth);\n\n    daysFromMonth.push(dayObj);\n  }\n\n  return daysFromMonth;\n}\n","import { useDispatch, useSelector, TypedUseSelectorHook } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport cn from 'classnames';\nimport { checkIsThisDayIsToday } from '../../utils/helpers/checkIsThisDayIsToday';\nimport { sortEventsByTime } from '../../utils/helpers/sortEventsByTime';\nimport { IDay } from '../../types/IDay';\nimport { IEvent } from '../../types/IEvent';\n\nimport './CalendarCell.scss';\nimport { useAppDispatch } from '../../hook';\nimport { setEditingEvent, setIsAddingEvent } from '../../store/calendarSlice';\n\ninterface props {\n  day: IDay;\n}\n\nexport const CalendarCell: React.FC<props> = ({ day }) => {\n  const dispatch = useAppDispatch();\n  const isThisDayIsToday = checkIsThisDayIsToday(day);\n  // const [selectedEvent, setSelectedEvent] = useState<IEvent | null>(null);\n\n  const eventSelectionHandler = (event : IEvent) => {\n    dispatch(setIsAddingEvent(false));\n    dispatch(setEditingEvent(event));\n  };\n\n  const sortedDayEvents = sortEventsByTime(day.dayEvents);\n\n  return (\n    <div className={cn(\n      'dayCell',\n      { 'dayCell--current': isThisDayIsToday },\n      { 'dayCell--notActual': !day.isFromSelectedMonth },\n      { 'dayCell--current--notActual': !day.isFromSelectedMonth && isThisDayIsToday },\n    )}\n    >\n      <header className=\"dayCell__header\">\n        <p className=\"dayCell__date\">{day.dayNumber}</p>\n        <p className=\"dayCell__dayOfWeek\">{day.dayOfWeek}</p>\n      </header>\n      <main className=\"dayCell__main\">\n        {sortedDayEvents.map((event: IEvent) => {\n          return (\n            <div\n              key={Math.random()}\n              className={cn(\n                'dayCell__eventTitle',\n                { 'dayCell__eventTitle--notActual': !day.isFromSelectedMonth },\n              )}\n              onClick={() => eventSelectionHandler(event)}\n              onKeyDown={() => eventSelectionHandler(event)}\n              role=\"button\"\n              tabIndex={0}\n            >\n              {event.title}\n            </div>\n          );\n        })}\n      </main>\n\n    </div>\n  );\n};\n","import { IDay } from '../../types/IDay';\nimport { makeDayObject } from './makeDateObject';\n\nexport function checkIsThisDayIsToday(day: IDay) {\n  const todayDayDate = new Date();\n  const todayDayObject = makeDayObject(todayDayDate, []);\n  const todayDateString = todayDayObject.dateString.split(' ')[0];\n  const selectedDayDateString = day.dateString.split(' ')[0];\n\n  return todayDateString === selectedDayDateString;\n}\n","/* eslint-disable no-console */\nimport { IEvent } from '../../types/IEvent';\n\nexport function sortEventsByTime(dayEvents: IEvent[]) {\n  const sortedEvents = dayEvents.sort((eventA, eventB) => {\n    let sumMinutesA = Infinity;\n    let sumMinutesB = Infinity;\n\n    if (eventA.beginTime) {\n      const [hoursA, minutesA] = eventA.beginTime.split(' ')[1].split(':');\n\n      sumMinutesA = parseInt(hoursA, 10) * 60 + parseInt(minutesA, 10);\n    }\n\n    if (eventB.beginTime) {\n      const [hoursB, minutesB] = eventB.beginTime.split(' ')[1].split(':');\n\n      sumMinutesB = parseInt(hoursB, 10) * 60 + parseInt(minutesB, 10);\n    }\n\n    console.log(sumMinutesA, sumMinutesB, 'sumMinutesB');\n\n    return sumMinutesA - sumMinutesB;\n  });\n\n  return sortedEvents;\n}\n","import { IEvent } from '../../types/IEvent';\n\nexport function sendDataToServer(updatedEvents: IEvent[]) {\n  localStorage.setItem('events', JSON.stringify(updatedEvents));\n}\n","/* eslint-disable no-console */\nexport function getBeginTimeString(\n  dateObject: any,\n) {\n  const dateString = dateObject.toString();\n  const [, , date, year, time] = dateString.split(' ');\n  const monthNumber = +dateObject.getMonth() + 1;\n\n  const beginTimeString = `${year}-${monthNumber}-${date} ${time.slice(0, 5)}`;\n\n  return beginTimeString;\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\nimport React, { useState, useEffect } from 'react';\nimport TextField from '@mui/material/TextField';\nimport { TimePicker } from '@mui/x-date-pickers/TimePicker';\nimport Button from '@mui/material/Button';\nimport { StaticTimePicker } from '@mui/x-date-pickers/StaticTimePicker';\nimport Stack from '@mui/material/Stack';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { DesktopDatePicker } from '@mui/x-date-pickers/DesktopDatePicker';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport { useDispatch } from 'react-redux';\nimport { getDateString } from '../../utils/helpers/getDateString';\nimport { getTimeString } from '../../utils/helpers/getTimeString';\nimport { sendDataToServer } from '../../utils/helpers/sendDataToServer';\nimport { useAppSelector } from '../../hook';\nimport { setUserEvents, setEditingEvent } from '../../store/calendarSlice';\nimport { IEvent } from '../../types/IEvent';\n\nimport './UpdateForm.scss';\nimport { getBeginTimeString } from '../../utils/helpers/getBeginTimeString';\n\ninterface props {\n  editingEvent: IEvent\n}\n\nexport const UpdateForm: React.FC<props> = ({ editingEvent }) => {\n  const dispatch = useDispatch();\n  const usersEvent = useAppSelector(state => state.calendar.userEvents);\n  const [title, setTitle] = useState(editingEvent.title);\n  const [description, setDescription] = useState(editingEvent.description);\n  const [beginDate, setBeginDate] = useState<any>(editingEvent.beginDate);\n  const [beginTime, setBeginTime] = useState(editingEvent.beginTime);\n\n  useEffect(() => {\n    setTitle(editingEvent.title);\n    setDescription(editingEvent.description);\n    setBeginDate(editingEvent.beginDate);\n    setBeginTime(editingEvent.beginTime);\n  }, [editingEvent]);\n\n  const closeEvent = () => {\n    dispatch(setEditingEvent(null));\n  };\n\n  const handleSubmit = (event: any) => {\n    event.preventDefault();\n\n    const dateString = getDateString(new Date());\n\n    const updatedEvent: IEvent = {\n      ...editingEvent,\n      title,\n      description,\n      editedAt: dateString,\n      beginDate,\n      beginTime,\n    };\n\n    const notUpdatedEvents = usersEvent\n      .filter(eventFromStorage => eventFromStorage.id !== editingEvent?.id);\n\n    const updatedEvents: IEvent[] = [...notUpdatedEvents, updatedEvent];\n\n    dispatch(setUserEvents(updatedEvents));\n    sendDataToServer(updatedEvents);\n\n    closeEvent();\n  };\n\n  const datePickerHandler = (date: any) => {\n    const beginDateString = getDateString(date.$d);\n\n    setBeginDate(beginDateString);\n  };\n\n  const dateTimeHandler = (time: any) => {\n    const beginTimeString = getBeginTimeString(time.$d);\n\n    setBeginTime(beginTimeString);\n  };\n\n  const deleteEvent = () => {\n    const updatedEvents = usersEvent.filter(event => event.id !== editingEvent.id);\n\n    dispatch(setUserEvents(updatedEvents));\n\n    closeEvent();\n  };\n\n  return (\n    <form className=\"editEventForm\" onSubmit={handleSubmit}>\n      <div className=\"editEventForm__header\">\n        <div className=\"editEventForm__buttons\">\n          <div\n            className=\"editEventForm__bin\"\n            onClick={() => deleteEvent()}\n            onKeyUp={() => deleteEvent()}\n            tabIndex={0}\n            role=\"button\"\n          >\n\n          </div>\n          <div\n            className=\"editEventForm__close\"\n            onClick={() => closeEvent()}\n            onKeyUp={() => closeEvent()}\n            tabIndex={0}\n            role=\"button\"\n          >\n          </div>\n        </div>\n        <h2 className=\"editEventForm__formTitle\">\n          Edit event\n        </h2>\n        <p className=\"editEventForm__createdAt\">\n          Created at:&nbsp;\n          {editingEvent.createdAt}\n        </p>\n        {\n          editingEvent.editedAt\n        && (\n          <p className=\"editEventForm__updatedAt\">\n            Last updated at:&nbsp;\n            {editingEvent?.editedAt}\n          </p>\n        )\n        }\n      </div>\n      <div className=\"editEventForm__main\">\n        <Stack direction=\"column\" spacing={2}>\n          <LocalizationProvider dateAdapter={AdapterDayjs}>\n            <Stack spacing={1}>\n              <TextField\n                id=\"outlined-basic\"\n                label=\"Title\"\n                variant=\"outlined\"\n                required\n                color=\"secondary\"\n                value={title}\n                onChange={(e) => setTitle(e.target.value)}\n              />\n              <TextField\n                id=\"outlined-basic\"\n                label=\"Description\"\n                variant=\"outlined\"\n                multiline\n                color=\"secondary\"\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n              />\n              <DesktopDatePicker\n                label=\"Date\"\n                inputFormat=\"DD/MM/YYYY\"\n                value={beginDate}\n                onChange={datePickerHandler}\n                renderInput={(inputProps) => (\n                  <TextField\n                    {...inputProps}\n                    required\n                    error={false}\n                    color=\"secondary\"\n                  />\n                )}\n              />\n              <TimePicker\n                label=\"Time\"\n                value={beginTime}\n                onChange={dateTimeHandler}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    error={false}\n                    color=\"secondary\"\n                  />\n                )}\n              />\n\n            </Stack>\n          </LocalizationProvider>\n          <Button variant=\"contained\" color=\"secondary\" type=\"submit\">\n            Save\n          </Button>\n        </Stack>\n      </div>\n    </form>\n  );\n};\n","/* eslint-disable padding-line-between-statements */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/*eslint-disable*/\nimport React, { useState } from 'react';\nimport { getDaysArray } from '../../utils/helpers/getDaysArray';\nimport { getDaysList } from '../../utils/helpers/getDaysList';\nimport { useAppDispatch, useAppSelector } from '../../hook';\nimport { setEditingEvent } from '../../store/calendarSlice';\nimport { IDay } from '../../types/IDay';\nimport { CalendarCell } from '../CalendarCell/CalendarCell';\nimport { UpdateForm } from '../UpdateForm/UpdateForm';\n\nimport './Calendar.scss';\n\nexport const Calendar = () => {\n  const currMonth = useAppSelector(state => state.calendar.currMonth)\n  const userEvents = useAppSelector(state => state.calendar.userEvents)\n  const editingEvent = useAppSelector (state => state.calendar.editingEvent)\n  const dayList = getDaysList(currMonth, userEvents)\n\n  return (\n    <ul className=\"calendar\">\n      {\n        editingEvent\n        && (<UpdateForm editingEvent={editingEvent}/> )\n      }\n      {dayList.map((day: IDay) => {\n        return (\n          <li key={Math.random()} className=\"calendar__dayCell\">\n            <CalendarCell day={day} />\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/*eslint-disable*/\nimport { IDay } from '../../types/IDay';\nimport { IEvent } from '../../types/IEvent';\nimport { IMonth, IMonthRoot } from '../../types/IMonth';\nimport { getDaysFromMonth } from './getDaysFromMonth';\n\nconst daysAmountInCalendar = 42;\n\nexport function getDaysList(currMonth: IMonthRoot | null, userEvents: IEvent[]) {\n  if (!currMonth) {\n    return []\n  }\n  \n  const daysFromCurrentMonth = getDaysFromMonth(\n    currMonth,\n    'currentMonth',\n    +currMonth.daysAmount,\n    userEvents,\n  );\n\n  const firstDayOfWeekOfCurrentMonth = +daysFromCurrentMonth[0].dayOfWeekNumber;\n  // const lastDayOfWeekOfCurrentMonth\n  //   = +daysFromCurrentMonth[daysFromCurrentMonth.length - 1].dayNumber;\n\n  const daysFromPreviousMonth = getDaysFromMonth(\n    currMonth.prevMonth,\n    'previousMonth',\n    firstDayOfWeekOfCurrentMonth - 1,\n    userEvents,\n  );\n\n  const needDaysFromNextMonth = daysAmountInCalendar - daysFromCurrentMonth.length - daysFromPreviousMonth.length\n\n  const daysFromNextMonth = getDaysFromMonth(\n    currMonth.nextMonth,\n    'nextMonth',\n    needDaysFromNextMonth,\n    userEvents,\n  );\n\n  const daysList = [...daysFromPreviousMonth, ...daysFromCurrentMonth, ...daysFromNextMonth];\n  \n  return daysList;\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { IMonth } from '../../types/IMonth';\nimport { getMonthName } from './getMonthName';\nimport { getMonthNumberString } from './getMonthNumberString';\n\nexport function createMonthObject(date: Date): IMonth {\n  const year = date.getFullYear();\n  const monthIndex = date.getMonth();\n  const monthNumber = monthIndex + 1;\n  const monthNumberString = getMonthNumberString(monthIndex);\n  const [monthShortName, monthFullName] = getMonthName(monthIndex);\n  const daysAmount = date.getDate();\n  const fullDate = `01/${monthNumberString}/${year}`;\n  const fullDateReverse = `${year}-${monthNumberString}-01`;\n  const dateWithMonthName = `${monthFullName} ${year}`;\n\n  return {\n    year,\n    monthIndex,\n    monthNumber,\n    monthShortName,\n    monthFullName,\n    fullDate,\n    fullDateReverse,\n    dateWithMonthName,\n    daysAmount,\n  };\n}\n\nexport {};\n","export function getMonthName(monthIndex: number) {\n  switch (monthIndex) {\n    case 0:\n      return ['Jan', 'January'];\n    case 1:\n      return ['Feb', 'February'];\n    case 2:\n      return ['Mar', 'March'];\n    case 3:\n      return ['Apr', 'April'];\n    case 4:\n      return ['May', 'May'];\n    case 5:\n      return ['Jun', 'June'];\n    case 6:\n      return ['Jul', 'July'];\n    case 7:\n      return ['Aug', 'August'];\n    case 8:\n      return ['Sep', 'September'];\n    case 9:\n      return ['Oct', 'October'];\n    case 10:\n      return ['Nov', 'November'];\n    case 11:\n      return ['Dec', 'December'];\n    default:\n      return 'uknown';\n  }\n}\n","/*eslint-disable*/\n\nimport { IDateFilter } from \"../../types/IDateFilter\";\n\nexport function setDateFilterToLS (newDateFilter: IDateFilter) {\n  localStorage.setItem('dateFilter', JSON.stringify(newDateFilter))\n}","export function getYearAndMonthFromDate(date: Date) {\n  const year = date.getFullYear();\n  const monthIndex = date.getMonth();\n\n  return { year, monthIndex };\n}\n","import { getYearAndMonthFromDate } from './getYearAndMonthFromDate';\n\nexport function createDateFilter(year: number, monthIndex: number) {\n  const date = new Date(year, monthIndex);\n  const dateFilter = getYearAndMonthFromDate(date);\n\n  return dateFilter;\n}\n","/* eslint-disable no-console */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useState, useEffect } from 'react';\n\nimport dayjs, { Dayjs } from 'dayjs';\nimport Grid from '@mui/material/Grid';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { CalendarPicker } from '@mui/x-date-pickers/CalendarPicker';\nimport { MonthPicker } from '@mui/x-date-pickers/MonthPicker';\nimport { YearPicker } from '@mui/x-date-pickers/YearPicker';\n\nimport { createCurrMonthObject } from '../../utils/helpers/createCurrMonthObject';\nimport { setDateFilterToLS } from '../../utils/helpers/setDateFilterToLS';\nimport { useAppDispatch, useAppSelector } from '../../hook';\nimport { setCurrMonth, setDateFilter } from '../../store/calendarSlice';\nimport { IDateFilter } from '../../types/IDateFilter';\nimport { IMonthRoot } from '../../types/IMonth';\nimport arrowGrey from '../../images/arrowGrey.png';\nimport arrowWhite from '../../images/arrowWhite.png';\n\nimport './DateFilter.scss';\nimport { createDateFilter } from '../../utils/helpers/createDateFilter';\n\nexport const DateFilter = () => {\n  const dispatch = useAppDispatch();\n  const dateFilter = useAppSelector(state => state.calendar.dateFilter);\n  const selectedMonth = useAppSelector(state => state.calendar.currMonth);\n\n  const initialValueForDatePicker = selectedMonth ? selectedMonth.fullDateReverse : null;\n  const [datePicker, setDatePicker] = useState<Dayjs | null>(dayjs(initialValueForDatePicker));\n  const [isDatePicker, setIsDatePicker] = useState(false);\n  const minDate = dayjs('2020-01-01T00:00:00.000');\n  const maxDate = dayjs('2034-01-01T00:00:00.000');\n\n  useEffect(() => {\n    if (dateFilter) {\n      const newSelectedMonth = createCurrMonthObject(dateFilter);\n\n      setDatePicker(dayjs(newSelectedMonth.fullDateReverse));\n      dispatch(setCurrMonth(newSelectedMonth));\n    }\n  }, [dateFilter]);\n\n  const next = () => {\n    if (dateFilter) {\n      const selectedMonthIndex = dateFilter.monthIndex;\n      const selectedYear = dateFilter.year;\n\n      const updatedDateFilter = createDateFilter(selectedYear, selectedMonthIndex + 1);\n\n      dispatch(setDateFilter(updatedDateFilter));\n      setDateFilterToLS(updatedDateFilter);\n    }\n  };\n\n  const prev = () => {\n    if (dateFilter) {\n      const selectedMonthIndex = dateFilter.monthIndex;\n      const selectedYear = dateFilter.year;\n\n      const updatedDateFilter = createDateFilter(selectedYear, selectedMonthIndex - 1);\n\n      dispatch(setDateFilter(updatedDateFilter));\n      setDateFilterToLS(updatedDateFilter);\n    }\n  };\n\n  const datePickerHandler = (newDate: any) => {\n    if (newDate) {\n      const year = newDate.year();\n      const month = newDate.month();\n\n      const updatedDateFilter = createDateFilter(year, month);\n\n      setDatePicker(newDate);\n      dispatch(setDateFilter(updatedDateFilter));\n      setDateFilterToLS(updatedDateFilter);\n    }\n  };\n\n  return (\n    selectedMonth && (\n      <div className=\"dateFilter\">\n        <div\n          className=\"dateFilter__arrow dateFilter__arrow--left\"\n          onClick={() => prev()}\n          onKeyUp={() => prev()}\n          tabIndex={0}\n          role=\"button\"\n        >\n        </div>\n        <p className=\"dateFilter__selectedDate\">{selectedMonth.dateWithMonthName}</p>\n        <div\n          className=\"dateFilter__arrow dateFilter__arrow--right\"\n          onClick={() => next()}\n          onKeyUp={() => next()}\n          tabIndex={0}\n          role=\"button\"\n        >\n        </div>\n        <div\n          className=\"dateFilter__calendarImage\"\n          onClick={() => setIsDatePicker(!isDatePicker)}\n          onKeyUp={() => setIsDatePicker(!isDatePicker)}\n          tabIndex={0}\n          role=\"button\"\n        >\n        </div>\n        <div className=\"dateFilter__datePicker\">\n          {isDatePicker && (\n            <LocalizationProvider dateAdapter={AdapterDayjs}>\n              <Grid container spacing={3}>\n                <Grid item xs={12} md={6}>\n                  <MonthPicker\n                    date={datePicker}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onChange={(newDate) => datePickerHandler(newDate)}\n                  />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <YearPicker\n                    date={datePicker}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onChange={(newDate) => datePickerHandler(newDate)}\n                  />\n                </Grid>\n              </Grid>\n            </LocalizationProvider>\n          )}\n        </div>\n      </div>\n    )\n  );\n};\n","/*eslint-disable*/\n\nimport { IDateFilter } from '../../types/IDateFilter';\nimport { IMonthRoot } from '../../types/IMonth';\nimport { createMonthObject } from './createMonthObject';\n\nexport function createCurrMonthObject(\ndateFilter: IDateFilter\n): IMonthRoot {\n  const {year,monthIndex} = dateFilter;\n\n  const currentMonthDate = new Date(year, monthIndex + 1, 0);\n  const prevMonthDate = new Date(year, monthIndex, 0);\n  const futureMonthDate = new Date(year, monthIndex + 2, 0);\n\n  const currentMonthObject = createMonthObject(currentMonthDate);\n  const prevMonthObject = createMonthObject(prevMonthDate);\n  const futureMonthObject = createMonthObject(futureMonthDate);\n\n  const selectedMonth = {\n    ...currentMonthObject,\n    prevMonth: prevMonthObject,\n    nextMonth: futureMonthObject,\n  };\n  \n  return selectedMonth\n}\n","/* eslint-disable no-console */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useState, useEffect } from 'react';\nimport { SxProps } from '@mui/material';\nimport { getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\n// import { getCurrentDate } from '../../helpers/getCurrentDate';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport { TimePicker } from '@mui/x-date-pickers/TimePicker';\nimport Button from '@mui/material/Button';\nimport { StaticTimePicker } from '@mui/x-date-pickers/StaticTimePicker';\nimport Stack from '@mui/material/Stack';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { DesktopDatePicker } from '@mui/x-date-pickers/DesktopDatePicker';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport { getDateString } from '../../utils/helpers/getDateString';\nimport { makeDayObject } from '../../utils/helpers/makeDateObject';\nimport { sendDataToServer } from '../../utils/helpers/sendDataToServer';\nimport { useAppSelector } from '../../hook';\nimport { setIsAddingEvent, setUserEvents } from '../../store/calendarSlice';\nimport { IEvent } from '../../types/IEvent';\n\nimport './Form.scss';\nimport { getTimeString } from '../../utils/helpers/getTimeString';\nimport { getBeginTimeString } from '../../utils/helpers/getBeginTimeString';\n\nexport const Form = () => {\n  const dispatch = useDispatch();\n  const userEvents = useAppSelector(state => state.calendar.userEvents);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [beginDate, setBeginDate] = useState<any>('');\n  const [beginTime, setBeginTime] = useState<string>('');\n\n  const closeForm = () => {\n    dispatch(setIsAddingEvent(false));\n  };\n\n  const handleSubmit = (event: any) => {\n    event.preventDefault();\n\n    const uniqueId = `id${Math.random().toString(16).slice(2)}`;\n    const dateString = getDateString(new Date());\n\n    const newEvent = {\n      id: uniqueId,\n      title,\n      description,\n      createdAt: dateString,\n      beginDate,\n      beginTime,\n    };\n\n    const updatedEvents: IEvent[] = [...userEvents, newEvent];\n\n    dispatch(setUserEvents(updatedEvents));\n    sendDataToServer(updatedEvents);\n\n    closeForm();\n  };\n\n  const datePickerHandler = (date: any) => {\n    const beginDateString = getDateString(date.$d);\n\n    setBeginDate(beginDateString);\n  };\n\n  const dateTimeHandler = (time: any) => {\n    const beginTimeString = getBeginTimeString(time.$d);\n\n    setBeginTime(beginTimeString);\n  };\n\n  return (\n    <form className=\"newEventForm\" onSubmit={handleSubmit}>\n      <div className=\"newEventForm__header\">\n        <div\n          className=\"newEventForm__close\"\n          onClick={() => closeForm()}\n          onKeyUp={() => closeForm()}\n          tabIndex={0}\n          role=\"button\"\n        >\n        </div>\n        <h2 className=\"newEventForm__formTitle\">\n          Add new event\n        </h2>\n      </div>\n      <div className=\"newEventForm__main\">\n        <Stack direction=\"column\" spacing={2}>\n          <LocalizationProvider dateAdapter={AdapterDayjs}>\n            <Stack spacing={1}>\n              <TextField\n                id=\"outlined-basic\"\n                label=\"Title\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                required\n                onChange={(e) => setTitle(e.target.value)}\n              />\n              <TextField\n                id=\"outlined-basic\"\n                label=\"Description\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                multiline\n                onChange={(e) => setDescription(e.target.value)}\n              />\n              <DesktopDatePicker\n                label=\"Date\"\n                inputFormat=\"DD/MM/YYYY\"\n                value={beginDate}\n                onChange={datePickerHandler}\n                renderInput={(inputProps) => (\n                  <TextField\n                    {...inputProps}\n                    required\n                    error={false}\n                    color=\"secondary\"\n                  // sx={{\n                  //   svg: { color: 'green' },\n                  // }}\n                  />\n                )}\n              />\n              <TimePicker\n                label=\"Time\"\n                value={beginTime}\n                onChange={dateTimeHandler}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    error={false}\n                    color=\"secondary\"\n                  // sx={{\n                  //   svg: { color: 'black' },\n                  // }}\n                  />\n                )}\n              />\n            </Stack>\n          </LocalizationProvider>\n          <Button variant=\"contained\" color=\"secondary\" type=\"submit\">\n            Save\n          </Button>\n        </Stack>\n      </div>\n    </form>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\nimport React, { useState, useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../hook';\nimport { setEditingEvent, setIsAddingEvent } from '../../store/calendarSlice';\nimport { Form } from '../Form/Form';\n\nimport './EventButton.scss';\n\nexport const EventButton = () => {\n  const dispatch = useAppDispatch();\n  const isAddingEvent = useAppSelector(state => state.calendar.isAddingEvent);\n\n  const startAdditingNewEvent = () => {\n    dispatch(setEditingEvent(null));\n    dispatch(setIsAddingEvent(true));\n  };\n\n  return (\n    <div className=\"eventAdderButton\">\n      {/* <img src={plusImage} alt=\"img\" className=\"eventAdderButton__plus\" /> */}\n      <button\n        className=\"eventAdderButton__plus\"\n        onClick={() => startAdditingNewEvent()}\n        onKeyDown={() => startAdditingNewEvent()}\n        tabIndex={0}\n        type=\"button\"\n      >\n        +\n      </button>\n\n      {\n        isAddingEvent\n        && <Form />\n      }\n    </div>\n\n  );\n};\n","import { getInitialDateFilter } from './getInitialDateFilter';\n\nexport function getDateFilterFromLS() {\n  const filtersFromLS = localStorage.getItem('dateFilter');\n\n  if (filtersFromLS) {\n    return JSON.parse(filtersFromLS);\n  }\n\n  const initialDateFilter = getInitialDateFilter();\n\n  return initialDateFilter;\n}\n","import { getYearAndMonthFromDate } from './getYearAndMonthFromDate';\n\nexport function getInitialDateFilter() {\n  const todayDate = new Date();\n  const todayYearAndMonth = getYearAndMonthFromDate(todayDate);\n\n  return todayYearAndMonth;\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\nimport React, { useEffect } from 'react';\nimport './App.scss';\nimport { Calendar } from './components/Calendar/Calendar';\nimport { DateFilter } from './components/DateFilter/DateFilter';\nimport { EventButton } from './components/EventButton/EventButton';\n// import { getCurrentDate } from './helpers/getCurrentDate';\nimport { getDataFromServer } from './utils/helpers/getDataFromServer';\nimport { getDateFilterFromLS } from './utils/helpers/getDateFilterFromLS';\nimport { useAppDispatch, useAppSelector } from './hook';\nimport { setCurrMonth, setDateFilter, setUserEvents } from './store/calendarSlice';\nimport { IDateFilter } from './types/IDateFilter';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const dateFilter = useAppSelector(state => state.calendar.dateFilter);\n\n  useEffect(() => {\n    const eventsFromServer = getDataFromServer();\n    const dateFilterFromLS = getDateFilterFromLS();\n\n    dispatch(setUserEvents(eventsFromServer));\n    dispatch(setDateFilter(dateFilterFromLS));\n  }, []);\n\n  return (\n    dateFilter && (\n      <div className=\"app\">\n        <header className=\"app__header\">\n          <EventButton />\n          <DateFilter />\n        </header>\n        <main className=\"app__main\">\n          <Calendar />\n        </main>\n        <a target=\"_blank\" href=\"https://icons8.com/\" className=\"resource\" rel=\"noreferrer\">Icons resource link</a>\n      </div>\n    )\n  );\n};\n","export function getDataFromServer() {\n  const dataFromServer = localStorage.getItem('events');\n  let preparedDate;\n\n  if (dataFromServer) {\n    preparedDate = JSON.parse(dataFromServer);\n  }\n\n  if (!dataFromServer) {\n    preparedDate = [];\n  }\n\n  return preparedDate;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport { App } from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}