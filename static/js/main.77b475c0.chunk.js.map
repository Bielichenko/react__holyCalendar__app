{"version":3,"sources":["store/calendarSlice.ts","store/index.ts","utils/helpers/getDayOfWeekNumber.tsx","utils/helpers/getMonthNumberString.ts","utils/helpers/getFullDateString.ts","utils/helpers/makeDateObject.ts","utils/helpers/getDaysFromMonth.ts","hook.ts","components/DayCell/DayCell.tsx","utils/helpers/checkIsThisDayIsToday.ts","utils/helpers/sortEventsByTime.ts","utils/helpers/sendDataToServer.ts","components/Forms/EditingEventForm/EditingEventForm.tsx","components/CalendarGrid/CalendarGrid.tsx","utils/helpers/getDaysList.ts","utils/helpers/setDateFilterToLS.ts","utils/helpers/getYearAndMonthFromDate.ts","utils/helpers/createDateFilter.ts","utils/helpers/createMonthObject.ts","utils/helpers/getMonthName.ts","components/DateFilter/DateFilter.tsx","utils/helpers/createSelectedMonthObject.ts","utils/helpers/getDateFilterFromLS.ts","utils/helpers/getInitialDateFilter.ts","components/Forms/CreatingEventForm/CreatingEventForm.tsx","components/CreatingEventButton/CreatingEventButton.tsx","App.tsx","utils/helpers/getDataFromServer.ts","index.tsx"],"names":["calendarSlice","createSlice","name","initialState","dateFilter","selectedMonth","userEvents","isCreatingEvent","editedEvent","reducers","setDateFilter","state","action","payload","setSelectedMonth","setUserEvents","setIsCreatingEvent","setEditedEvent","actions","store","configureStore","reducer","calendar","calendarReducer","getDayOfWeekNumber","dayOfWeekName","getMonthNumberString","monthIndex","monthNumber","toFixed","length","getFullDateString","date","dayString","toString","getMonth","dayArray","split","dayNumber","year","time","monthNumberString","slice","makeDayObject","dayDate","isFromSelectedMonth","undefined","getFullYear","getDate","dayDateString","monthName","dayOfWeekNumber","dateString","dayEvents","filter","event","beginDate","dayObject","getDaysFromMonth","month","kindOfMonth","needDayFromThisMonth","startNumber","lastNumber","daysFromMonth","daysAmount","i","dayObj","Date","push","useAppDispatch","useDispatch","useAppSelector","useSelector","DayCell","day","dispatch","isThisDayIsToday","checkIsThisDayIsToday","sortedDayEvents","sort","eventA","eventB","sumMinutesA","Infinity","sumMinutesB","beginTime","hoursA","minutesA","parseInt","hoursB","minutesB","eventSelectionHandler","className","cn","map","onClick","onKeyDown","role","tabIndex","title","id","sendDataToServer","updatedEvents","localStorage","setItem","JSON","stringify","EditingEventForm","useState","setTitle","description","setDescription","setBeginDate","setBeginTime","useEffect","closeForm","deleteEvent","onSubmit","preventDefault","updatedEvent","editedAt","notEditedEvents","userEvent","onKeyUp","createdAt","Stack","direction","spacing","LocalizationProvider","dateAdapter","AdapterDayjs","TextField","label","variant","required","color","value","onChange","e","target","multiline","DesktopDatePicker","inputFormat","beginDateString","$d","renderInput","inputProps","error","TimePicker","beginTimeString","params","Button","type","CalendarGrid","daysListForCalendar","daysFromCurrentMonth","needDaysFromPrevMonth","daysFromPreviousMonth","prevMonth","needDaysFromNextMonth","daysFromNextMonth","nextMonth","getDaysList","Math","random","setDateFilterToLS","newDateFilter","getYearAndMonthFromDate","createDateFilter","createMonthObject","getMonthName","monthShortName","monthFullName","fullDate","fullDateReverse","dateWithMonthName","DateFilter","initialValueForDatePicker","dayjs","datePicker","setDatePicker","isDatePicker","setIsDatePicker","minDate","maxDate","newSelectedMonth","selectedMonthDate","prevMonthDate","nextMonthDate","currentMonthObject","prevMonthObject","futureMonthObject","createSelectedMonthObject","nextMonthHandler","selectedMonthIndex","updatedDateFilter","prevMonthHandler","datePickerHandler","newDate","Grid","container","item","xs","md","MonthPicker","YearPicker","getDateFilterFromLS","filtersFromLS","getItem","parse","CreatingEventForm","uniqueId","fullDateString","newEvent","CreatingEventButton","startCreatingNewEvent","App","eventsFromServer","preparedDate","dataFromServer","getDataFromServer","dateFilterFromLS","href","rel","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.77b475c0.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { IDateFilter } from '../types/IDateFilter';\nimport { IEvent } from '../types/IEvent';\nimport { IMonthSelected } from '../types/IMonthSelected';\n\ntype calendar = {\n  dateFilter: IDateFilter | null;\n  selectedMonth: IMonthSelected | null;\n  userEvents: IEvent[];\n  isCreatingEvent: boolean;\n  editedEvent: IEvent | null;\n};\n\nconst initialState: calendar = {\n  dateFilter: null,\n  selectedMonth: null,\n  userEvents: [],\n  isCreatingEvent: false,\n  editedEvent: null,\n};\n\nconst calendarSlice = createSlice({\n  name: 'calendar',\n  initialState,\n  reducers: {\n    setDateFilter(state, action: PayloadAction<IDateFilter>) {\n      state.dateFilter = action.payload;\n    },\n    setSelectedMonth(state, action: PayloadAction<IMonthSelected>) {\n      state.selectedMonth = action.payload;\n    },\n    setUserEvents(state, action: PayloadAction<IEvent[]>) {\n      state.userEvents = action.payload;\n    },\n    setIsCreatingEvent(state, action: PayloadAction<boolean>) {\n      state.isCreatingEvent = action.payload;\n    },\n    setEditedEvent(state, action: PayloadAction<IEvent | null>) {\n      state.editedEvent = action.payload;\n    },\n  },\n});\n\nexport const {\n  setDateFilter,\n  setSelectedMonth,\n  setUserEvents,\n  setIsCreatingEvent,\n  setEditedEvent,\n} = calendarSlice.actions;\n\nexport default calendarSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport calendarReducer from './calendarSlice';\n\nconst store = configureStore({\n  reducer: {\n    calendar: calendarReducer,\n  },\n});\n\nexport default store;\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","export function getDayOfWeekNumber(dayOfWeekName: string) {\n  switch (dayOfWeekName) {\n    case 'Mon':\n      return 1;\n    case 'Tue':\n      return 2;\n    case 'Wed':\n      return 3;\n    case 'Thu':\n      return 4;\n    case 'Fri':\n      return 5;\n    case 'Sat':\n      return 6;\n    case 'Sun':\n      return 7;\n    default:\n      return 1;\n  }\n}\n","export function getMonthNumberString(monthIndex : number) {\n  const monthNumber = (monthIndex + 1).toFixed();\n\n  if (monthNumber.length > 1) {\n    return monthNumber;\n  }\n\n  return `0${monthNumber}`;\n}\n","import { getMonthNumberString } from './getMonthNumberString';\n\nexport function getFullDateString(date: Date) {\n  const dayString = date.toString();\n  const monthIndex = date.getMonth();\n  const dayArray: (string)[] = dayString.split(' ');\n\n  const [, , dayNumber, year, time] = dayArray;\n  const monthNumberString = getMonthNumberString(monthIndex);\n\n  const dateString = `${year}-${monthNumberString}-${dayNumber} ${time.slice(0, 5)}`;\n\n  return dateString;\n}\n","import { IDay } from '../../types/IDay';\nimport { IEvent } from '../../types/IEvent';\nimport { getDayOfWeekNumber } from './getDayOfWeekNumber';\nimport { getFullDateString } from './getFullDateString';\nimport { getMonthNumberString } from './getMonthNumberString';\n\nexport function makeDayObject(\n  dayDate: Date,\n  userEvents: IEvent[],\n  isFromSelectedMonth : boolean | undefined = undefined,\n): IDay {\n  const year = dayDate.getFullYear();\n  const dayNumber = dayDate.getDate();\n  const monthIndex = dayDate.getMonth();\n  const monthNumberString = getMonthNumberString(monthIndex);\n\n  const dayDateString = dayDate.toString();\n  const dayArray: string[] = dayDateString.split(' ');\n  const [dayOfWeekName, monthName] = dayArray;\n  const dayOfWeekNumber = getDayOfWeekNumber(dayOfWeekName);\n\n  const dateString = getFullDateString(dayDate).split(' ')[0];\n  const dayEvents = userEvents.filter((event: IEvent) => event.beginDate === dateString);\n\n  const dayObject = {\n    year,\n    monthIndex,\n    monthNumberString,\n    monthName,\n    dayNumber,\n    dayOfWeekNumber,\n    dayOfWeekName,\n    dateString,\n    dayEvents,\n    isFromSelectedMonth,\n  };\n\n  return dayObject;\n}\n","import { IDay } from '../../types/IDay';\nimport { IEvent } from '../../types/IEvent';\nimport { IMonth, IMonthSelected } from '../../types/IMonthSelected';\nimport { makeDayObject } from './makeDateObject';\n\nexport function getDaysFromMonth(\n  month: IMonth | IMonthSelected,\n  kindOfMonth: string,\n  needDayFromThisMonth: number,\n  userEvents: IEvent[],\n) {\n  let startNumber = 1;\n  let lastNumber = needDayFromThisMonth;\n  let { year } = month;\n  let isFromSelectedMonth = true;\n\n  const daysFromMonth: IDay[] = [];\n\n  if (kindOfMonth === 'previousMonth') {\n    isFromSelectedMonth = false;\n    startNumber = month.daysAmount - needDayFromThisMonth + 1;\n    lastNumber = month.daysAmount;\n\n    if (month.monthIndex === 11) {\n      year -= 1;\n    }\n  }\n\n  if (kindOfMonth === 'nextMonth') {\n    isFromSelectedMonth = false;\n    lastNumber = needDayFromThisMonth;\n\n    if (month.monthIndex === 0) {\n      year += 1;\n    }\n  }\n\n  for (let i = startNumber; i <= lastNumber; i += 1) {\n    const dayDate = new Date(year, +month.monthIndex, i);\n\n    const dayObj = makeDayObject(dayDate, userEvents, isFromSelectedMonth);\n\n    daysFromMonth.push(dayObj);\n  }\n\n  return daysFromMonth;\n}\n","import { useDispatch, useSelector, TypedUseSelectorHook } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport cn from 'classnames';\nimport { checkIsThisDayIsToday } from '../../utils/helpers/checkIsThisDayIsToday';\nimport { sortEventsByTime } from '../../utils/helpers/sortEventsByTime';\nimport { IDay } from '../../types/IDay';\nimport { IEvent } from '../../types/IEvent';\nimport { useAppDispatch } from '../../hook';\nimport { setEditedEvent, setIsCreatingEvent } from '../../store/calendarSlice';\n\nimport './DayCell.scss';\n\ninterface props {\n  day: IDay;\n}\n\nexport const DayCell: React.FC<props> = ({ day }) => {\n  const dispatch = useAppDispatch();\n\n  const isThisDayIsToday = checkIsThisDayIsToday(day);\n  const sortedDayEvents = sortEventsByTime(day.dayEvents);\n\n  const eventSelectionHandler = (event : IEvent) => {\n    dispatch(setIsCreatingEvent(false));\n    dispatch(setEditedEvent(event));\n  };\n\n  return (\n    <div className={cn(\n      'dayCell',\n      { 'dayCell--current': isThisDayIsToday },\n      { 'dayCell--notActual': !day.isFromSelectedMonth },\n      { 'dayCell--current--notActual': !day.isFromSelectedMonth && isThisDayIsToday },\n    )}\n    >\n      <header className=\"dayCell__header\">\n        <p className=\"dayCell__date\">{day.dayNumber}</p>\n        <p className=\"dayCell__dayOfWeek\">{day.dayOfWeekName}</p>\n      </header>\n      <main className=\"dayCell__main\">\n        {sortedDayEvents.map((event: IEvent) => {\n          return (\n            <div\n              key={event.id}\n              className={cn(\n                'dayCell__eventTitle',\n                { 'dayCell__eventTitle--notActual': !day.isFromSelectedMonth },\n              )}\n              onClick={() => eventSelectionHandler(event)}\n              onKeyDown={() => eventSelectionHandler(event)}\n              role=\"button\"\n              tabIndex={0}\n            >\n              {event.title}\n            </div>\n          );\n        })}\n      </main>\n    </div>\n  );\n};\n","import { IDay } from '../../types/IDay';\nimport { makeDayObject } from './makeDateObject';\n\nexport function checkIsThisDayIsToday(day: IDay) {\n  const todayDayDate = new Date();\n  const todayDayObject = makeDayObject(todayDayDate, []);\n  const todayDateString = todayDayObject.dateString;\n  const selectedDayDateString = day.dateString;\n\n  return todayDateString === selectedDayDateString;\n}\n","import { IEvent } from '../../types/IEvent';\n\nexport function sortEventsByTime(dayEvents: IEvent[]) {\n  const sortedEvents = dayEvents.sort((eventA, eventB) => {\n    let sumMinutesA = Infinity;\n    let sumMinutesB = Infinity;\n\n    if (eventA.beginTime) {\n      const [hoursA, minutesA] = eventA.beginTime.split(' ')[1].split(':');\n\n      sumMinutesA = parseInt(hoursA, 10) * 60 + parseInt(minutesA, 10);\n    }\n\n    if (eventB.beginTime) {\n      const [hoursB, minutesB] = eventB.beginTime.split(' ')[1].split(':');\n\n      sumMinutesB = parseInt(hoursB, 10) * 60 + parseInt(minutesB, 10);\n    }\n\n    return sumMinutesA - sumMinutesB;\n  });\n\n  return sortedEvents;\n}\n","import { IEvent } from '../../types/IEvent';\n\nexport function sendDataToServer(updatedEvents: IEvent[]) {\n  localStorage.setItem('events', JSON.stringify(updatedEvents));\n}\n","import React, { useState, useEffect } from 'react';\nimport TextField from '@mui/material/TextField';\nimport { TimePicker } from '@mui/x-date-pickers/TimePicker';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { DesktopDatePicker } from '@mui/x-date-pickers/DesktopDatePicker';\nimport { useDispatch } from 'react-redux';\nimport { getFullDateString } from '../../../utils/helpers/getFullDateString';\nimport { sendDataToServer } from '../../../utils/helpers/sendDataToServer';\nimport { useAppSelector } from '../../../hook';\nimport { setUserEvents, setEditedEvent } from '../../../store/calendarSlice';\nimport { IEvent } from '../../../types/IEvent';\n\nimport './EditingEventForm.scss';\n\ninterface props {\n  editedEvent: IEvent\n}\n\nexport const EditingEventForm: React.FC<props> = ({ editedEvent }) => {\n  const dispatch = useDispatch();\n  const userEvents = useAppSelector(state => state.calendar.userEvents);\n  const [title, setTitle] = useState(editedEvent.title);\n  const [description, setDescription] = useState(editedEvent.description);\n  const [beginDate, setBeginDate] = useState(editedEvent.beginDate);\n  const [beginTime, setBeginTime] = useState(editedEvent.beginTime);\n\n  useEffect(() => {\n    setTitle(editedEvent.title);\n    setDescription(editedEvent.description);\n    setBeginDate(editedEvent.beginDate);\n    setBeginTime(editedEvent.beginTime);\n  }, [editedEvent]);\n\n  const closeForm = () => {\n    dispatch(setEditedEvent(null));\n  };\n\n  const handleSubmit = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n\n    const dateString = getFullDateString(new Date());\n\n    const updatedEvent: IEvent = {\n      ...editedEvent,\n      title,\n      description,\n      editedAt: dateString,\n      beginDate,\n      beginTime,\n    };\n\n    const notEditedEvents = userEvents\n      .filter(userEvent => userEvent.id !== editedEvent.id);\n\n    const updatedEvents: IEvent[] = [...notEditedEvents, updatedEvent];\n\n    dispatch(setUserEvents(updatedEvents));\n    sendDataToServer(updatedEvents);\n\n    closeForm();\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const datePickerHandler = (date: any) => {\n    const beginDateString = getFullDateString(date.$d).split(' ')[0];\n\n    setBeginDate(beginDateString);\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const timePickerHandler = (time: any) => {\n    const beginTimeString = getFullDateString(time.$d);\n\n    setBeginTime(beginTimeString);\n  };\n\n  const deleteEvent = () => {\n    const updatedEvents = userEvents.filter(event => event.id !== editedEvent.id);\n\n    dispatch(setUserEvents(updatedEvents));\n\n    closeForm();\n  };\n\n  return (\n    <form className=\"editingEventForm\" onSubmit={handleSubmit}>\n      <div className=\"editingEventForm__header\">\n        <div className=\"editingEventForm__buttons\">\n          <div\n            className=\"editingEventForm__bin\"\n            onClick={() => deleteEvent()}\n            onKeyUp={() => deleteEvent()}\n            tabIndex={0}\n            role=\"button\"\n          >\n          </div>\n          <div\n            className=\"editingEventForm__close\"\n            onClick={() => closeForm()}\n            onKeyUp={() => closeForm()}\n            tabIndex={0}\n            role=\"button\"\n          >\n          </div>\n        </div>\n        <h2 className=\"editingEventForm__formTitle\">\n          Edit event\n        </h2>\n        <p className=\"editingEventForm__createdAt\">\n          Created at:&nbsp;\n          {editedEvent.createdAt}\n        </p>\n        {\n          editedEvent.editedAt\n        && (\n          <p className=\"editingEventForm__updatedAt\">\n            Last updated at:&nbsp;\n            {editedEvent.editedAt}\n          </p>\n        )\n        }\n      </div>\n      <div className=\"editingEventForm__main\">\n        <Stack direction=\"column\" spacing={2}>\n          <LocalizationProvider dateAdapter={AdapterDayjs}>\n            <Stack spacing={1}>\n              <TextField\n                id=\"outlined-basic\"\n                label=\"Title\"\n                variant=\"outlined\"\n                required\n                color=\"secondary\"\n                value={title}\n                onChange={(e) => setTitle(e.target.value)}\n              />\n              <TextField\n                id=\"outlined-basic\"\n                label=\"Description\"\n                variant=\"outlined\"\n                multiline\n                color=\"secondary\"\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n              />\n              <DesktopDatePicker\n                label=\"Date\"\n                inputFormat=\"DD/MM/YYYY\"\n                value={beginDate}\n                onChange={datePickerHandler}\n                renderInput={(inputProps) => (\n                  <TextField\n                    {...inputProps}\n                    required\n                    error={false}\n                    color=\"secondary\"\n                  />\n                )}\n              />\n              <TimePicker\n                label=\"Time\"\n                value={beginTime}\n                onChange={timePickerHandler}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    error={false}\n                    color=\"secondary\"\n                  />\n                )}\n              />\n\n            </Stack>\n          </LocalizationProvider>\n          <Button variant=\"contained\" color=\"secondary\" type=\"submit\">\n            Save\n          </Button>\n        </Stack>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { getDaysList } from '../../utils/helpers/getDaysList';\nimport { useAppSelector } from '../../hook';\nimport { IDay } from '../../types/IDay';\nimport { DayCell } from '../DayCell/DayCell';\nimport { EditingEventForm } from '../Forms/EditingEventForm/EditingEventForm';\n\nimport './CalendarGrid.scss';\n\nexport const CalendarGrid = () => {\n  const selectedMonth = useAppSelector(state => state.calendar.selectedMonth);\n  const userEvents = useAppSelector(state => state.calendar.userEvents);\n  const editedEvent = useAppSelector(state => state.calendar.editedEvent);\n  const daysListForCalendar = getDaysList(selectedMonth, userEvents);\n\n  return (\n    <ul className=\"calendarGrid\">\n      {\n        editedEvent\n        && (<EditingEventForm editedEvent={editedEvent} />)\n      }\n      {daysListForCalendar.map((day: IDay) => {\n        return (\n          <li key={Math.random()} className=\"calendarGrid__dayCell\">\n            <DayCell day={day} />\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","import { IEvent } from '../../types/IEvent';\nimport { IMonthSelected } from '../../types/IMonthSelected';\nimport { getDaysFromMonth } from './getDaysFromMonth';\n\nconst daysAmountInCalendar = 42;\n\nexport function getDaysList(selectedMonth: IMonthSelected | null, userEvents: IEvent[]) {\n  if (!selectedMonth) {\n    return [];\n  }\n\n  const daysFromCurrentMonth = getDaysFromMonth(\n    selectedMonth,\n    'selectedMonth',\n    selectedMonth.daysAmount,\n    userEvents,\n  );\n\n  const firstDayOfWeekOfCurrentMonth = daysFromCurrentMonth[0].dayOfWeekNumber;\n  const needDaysFromPrevMonth = firstDayOfWeekOfCurrentMonth - 1;\n\n  const daysFromPreviousMonth = getDaysFromMonth(\n    selectedMonth.prevMonth,\n    'previousMonth',\n    needDaysFromPrevMonth,\n    userEvents,\n  );\n\n  const needDaysFromNextMonth\n  = daysAmountInCalendar - daysFromCurrentMonth.length - daysFromPreviousMonth.length;\n\n  const daysFromNextMonth = getDaysFromMonth(\n    selectedMonth.nextMonth,\n    'nextMonth',\n    needDaysFromNextMonth,\n    userEvents,\n  );\n\n  const daysList = [...daysFromPreviousMonth, ...daysFromCurrentMonth, ...daysFromNextMonth];\n\n  return daysList;\n}\n","import { IDateFilter } from '../../types/IDateFilter';\n\nexport function setDateFilterToLS(newDateFilter: IDateFilter) {\n  localStorage.setItem('dateFilter', JSON.stringify(newDateFilter));\n}\n","export function getYearAndMonthFromDate(date: Date) {\n  const year = date.getFullYear();\n  const monthIndex = date.getMonth();\n\n  return { year, monthIndex };\n}\n","import { getYearAndMonthFromDate } from './getYearAndMonthFromDate';\n\nexport function createDateFilter(year: number, monthIndex: number) {\n  const date = new Date(year, monthIndex);\n  const dateFilter = getYearAndMonthFromDate(date);\n\n  return dateFilter;\n}\n","import { IMonth } from '../../types/IMonthSelected';\nimport { getMonthName } from './getMonthName';\nimport { getMonthNumberString } from './getMonthNumberString';\n\nexport function createMonthObject(date: Date): IMonth {\n  const year = date.getFullYear();\n  const monthIndex = date.getMonth();\n  const monthNumber = monthIndex + 1;\n  const monthNumberString = getMonthNumberString(monthIndex);\n  const [monthShortName, monthFullName] = getMonthName(monthIndex);\n  const daysAmount = date.getDate();\n  const fullDate = `01/${monthNumberString}/${year}`;\n  const fullDateReverse = `${year}-${monthNumberString}-01`;\n  const dateWithMonthName = `${monthFullName} ${year}`;\n\n  return {\n    year,\n    monthIndex,\n    monthNumber,\n    monthShortName,\n    monthFullName,\n    fullDate,\n    fullDateReverse,\n    dateWithMonthName,\n    daysAmount,\n  };\n}\n\nexport {};\n","export function getMonthName(monthIndex: number) {\n  switch (monthIndex) {\n    case 0:\n      return ['Jan', 'January'];\n    case 1:\n      return ['Feb', 'February'];\n    case 2:\n      return ['Mar', 'March'];\n    case 3:\n      return ['Apr', 'April'];\n    case 4:\n      return ['May', 'May'];\n    case 5:\n      return ['Jun', 'June'];\n    case 6:\n      return ['Jul', 'July'];\n    case 7:\n      return ['Aug', 'August'];\n    case 8:\n      return ['Sep', 'September'];\n    case 9:\n      return ['Oct', 'October'];\n    case 10:\n      return ['Nov', 'November'];\n    case 11:\n      return ['Dec', 'December'];\n    default:\n      return 'uknown';\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport dayjs, { Dayjs } from 'dayjs';\nimport Grid from '@mui/material/Grid';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { MonthPicker } from '@mui/x-date-pickers/MonthPicker';\nimport { YearPicker } from '@mui/x-date-pickers/YearPicker';\nimport { setDateFilterToLS } from '../../utils/helpers/setDateFilterToLS';\nimport { useAppDispatch, useAppSelector } from '../../hook';\nimport { setDateFilter, setSelectedMonth } from '../../store/calendarSlice';\nimport { createDateFilter } from '../../utils/helpers/createDateFilter';\nimport { createSelectedMonthObject } from '../../utils/helpers/createSelectedMonthObject';\n\nimport './DateFilter.scss';\n\nexport const DateFilter = () => {\n  const dispatch = useAppDispatch();\n  const dateFilter = useAppSelector(state => state.calendar.dateFilter);\n  const selectedMonth = useAppSelector(state => state.calendar.selectedMonth);\n\n  const initialValueForDatePicker = selectedMonth ? selectedMonth.fullDateReverse : null;\n  const [datePicker, setDatePicker] = useState<Dayjs | null>(dayjs(initialValueForDatePicker));\n  const [isDatePicker, setIsDatePicker] = useState(false);\n  const minDate = dayjs('2020-01-01T00:00:00.000');\n  const maxDate = dayjs('2034-01-01T00:00:00.000');\n\n  useEffect(() => {\n    if (dateFilter) {\n      const newSelectedMonth = createSelectedMonthObject(dateFilter);\n\n      setDatePicker(dayjs(newSelectedMonth.fullDateReverse));\n      dispatch(setSelectedMonth(newSelectedMonth));\n    }\n  }, [dateFilter]);\n\n  const nextMonthHandler = () => {\n    if (dateFilter) {\n      const selectedMonthIndex = dateFilter.monthIndex;\n      const selectedYear = dateFilter.year;\n\n      const updatedDateFilter = createDateFilter(selectedYear, selectedMonthIndex + 1);\n\n      dispatch(setDateFilter(updatedDateFilter));\n      setDateFilterToLS(updatedDateFilter);\n    }\n  };\n\n  const prevMonthHandler = () => {\n    if (dateFilter) {\n      const selectedMonthIndex = dateFilter.monthIndex;\n      const selectedYear = dateFilter.year;\n\n      const updatedDateFilter = createDateFilter(selectedYear, selectedMonthIndex - 1);\n\n      dispatch(setDateFilter(updatedDateFilter));\n      setDateFilterToLS(updatedDateFilter);\n    }\n  };\n\n  const datePickerHandler = (newDate: Dayjs) => {\n    if (newDate) {\n      const year = newDate.year();\n      const month = newDate.month();\n\n      const updatedDateFilter = createDateFilter(year, month);\n\n      setDatePicker(newDate);\n      dispatch(setDateFilter(updatedDateFilter));\n      setDateFilterToLS(updatedDateFilter);\n    }\n  };\n\n  return (\n    selectedMonth && (\n      <div className=\"dateFilter\">\n        <div\n          className=\"dateFilter__arrow dateFilter__arrow--left\"\n          onClick={() => prevMonthHandler()}\n          onKeyUp={() => prevMonthHandler()}\n          tabIndex={0}\n          role=\"button\"\n        >\n        </div>\n        <p className=\"dateFilter__selectedDate\">{selectedMonth.dateWithMonthName}</p>\n        <div\n          className=\"dateFilter__arrow dateFilter__arrow--right\"\n          onClick={() => nextMonthHandler()}\n          onKeyUp={() => nextMonthHandler()}\n          tabIndex={0}\n          role=\"button\"\n        >\n        </div>\n        <div\n          className=\"dateFilter__calendarImage\"\n          onClick={() => setIsDatePicker(!isDatePicker)}\n          onKeyUp={() => setIsDatePicker(!isDatePicker)}\n          tabIndex={0}\n          role=\"button\"\n        >\n        </div>\n        <div className=\"dateFilter__datePicker\">\n          {isDatePicker && (\n            <LocalizationProvider dateAdapter={AdapterDayjs}>\n              <Grid container spacing={3}>\n                <Grid item xs={12} md={6}>\n                  <MonthPicker\n                    date={datePicker}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onChange={(newDate) => datePickerHandler(newDate)}\n                  />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <YearPicker\n                    date={datePicker}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onChange={(newDate) => datePickerHandler(newDate)}\n                  />\n                </Grid>\n              </Grid>\n            </LocalizationProvider>\n          )}\n        </div>\n      </div>\n    )\n  );\n};\n","import { IDateFilter } from '../../types/IDateFilter';\nimport { IMonthSelected } from '../../types/IMonthSelected';\nimport { createMonthObject } from './createMonthObject';\n\nexport function createSelectedMonthObject(dateFilter: IDateFilter): IMonthSelected {\n  const { year, monthIndex } = dateFilter;\n\n  const selectedMonthDate = new Date(year, monthIndex + 1, 0);\n  const prevMonthDate = new Date(year, monthIndex, 0);\n  const nextMonthDate = new Date(year, monthIndex + 2, 0);\n\n  const currentMonthObject = createMonthObject(selectedMonthDate);\n  const prevMonthObject = createMonthObject(prevMonthDate);\n  const futureMonthObject = createMonthObject(nextMonthDate);\n\n  const selectedMonth = {\n    ...currentMonthObject,\n    prevMonth: prevMonthObject,\n    nextMonth: futureMonthObject,\n  };\n\n  return selectedMonth;\n}\n","import { getInitialDateFilter } from './getInitialDateFilter';\n\nexport function getDateFilterFromLS() {\n  const filtersFromLS = localStorage.getItem('dateFilter');\n\n  if (filtersFromLS) {\n    return JSON.parse(filtersFromLS);\n  }\n\n  const initialDateFilter = getInitialDateFilter();\n\n  return initialDateFilter;\n}\n","import { getYearAndMonthFromDate } from './getYearAndMonthFromDate';\n\nexport function getInitialDateFilter() {\n  const todayDate = new Date();\n  const todayYearAndMonth = getYearAndMonthFromDate(todayDate);\n\n  return todayYearAndMonth;\n}\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport TextField from '@mui/material/TextField';\nimport { TimePicker } from '@mui/x-date-pickers/TimePicker';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { DesktopDatePicker } from '@mui/x-date-pickers/DesktopDatePicker';\nimport { getFullDateString } from '../../../utils/helpers/getFullDateString';\nimport { sendDataToServer } from '../../../utils/helpers/sendDataToServer';\nimport { useAppSelector } from '../../../hook';\nimport { IEvent } from '../../../types/IEvent';\nimport { setIsCreatingEvent, setUserEvents } from '../../../store/calendarSlice';\n\nimport './CreatingEventForm.scss';\n\nexport const CreatingEventForm = () => {\n  const dispatch = useDispatch();\n  const userEvents = useAppSelector(state => state.calendar.userEvents);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [beginDate, setBeginDate] = useState<string>('');\n  const [beginTime, setBeginTime] = useState<string>('');\n\n  const closeForm = () => {\n    dispatch(setIsCreatingEvent(false));\n  };\n\n  const handleSubmit = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n\n    const uniqueId = `id${Math.random().toString(16).slice(2)}`;\n    const fullDateString = getFullDateString(new Date());\n\n    const newEvent = {\n      id: uniqueId,\n      title,\n      description,\n      createdAt: fullDateString,\n      beginDate,\n      beginTime,\n      editedAt: null,\n    };\n\n    const updatedEvents: IEvent[] = [...userEvents, newEvent];\n\n    dispatch(setUserEvents(updatedEvents));\n    sendDataToServer(updatedEvents);\n\n    closeForm();\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const datePickerHandler = (date: any) => {\n    if (date) {\n      const beginDateString = getFullDateString(date.$d).split(' ')[0];\n\n      setBeginDate(beginDateString);\n    }\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const dateTimeHandler = (date: any) => {\n    if (date) {\n      const beginTimeString = getFullDateString(date.$d);\n\n      setBeginTime(beginTimeString);\n    }\n  };\n\n  return (\n    <form className=\"creatingEventForm\" onSubmit={handleSubmit}>\n      <div className=\"creatingEventForm__header\">\n        <div\n          className=\"creatingEventForm__closeButton\"\n          onClick={() => closeForm()}\n          onKeyUp={() => closeForm()}\n          tabIndex={0}\n          role=\"button\"\n        >\n        </div>\n        <h2 className=\"creatingEventForm__formTitle\">\n          Add new event\n        </h2>\n      </div>\n      <div className=\"creatingEventForm__main\">\n        <Stack direction=\"column\" spacing={2}>\n          <LocalizationProvider dateAdapter={AdapterDayjs}>\n            <Stack spacing={1}>\n              <TextField\n                id=\"outlined-basic\"\n                label=\"Title\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                required\n                onChange={(e) => setTitle(e.target.value)}\n              />\n              <TextField\n                id=\"outlined-basic\"\n                label=\"Description\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                multiline\n                onChange={(e) => setDescription(e.target.value)}\n              />\n              <DesktopDatePicker\n                label=\"Date\"\n                inputFormat=\"DD/MM/YYYY\"\n                value={beginDate}\n                onChange={datePickerHandler}\n                renderInput={(inputProps) => (\n                  <TextField\n                    {...inputProps}\n                    required\n                    error={false}\n                    color=\"secondary\"\n                  />\n                )}\n              />\n              <TimePicker\n                label=\"Time\"\n                value={beginTime}\n                onChange={dateTimeHandler}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    error={false}\n                    color=\"secondary\"\n                  />\n                )}\n              />\n            </Stack>\n          </LocalizationProvider>\n          <Button variant=\"contained\" color=\"secondary\" type=\"submit\">\n            Save\n          </Button>\n        </Stack>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../hook';\nimport { setEditedEvent, setIsCreatingEvent } from '../../store/calendarSlice';\nimport { CreatingEventForm } from '../Forms/CreatingEventForm/CreatingEventForm';\n\nimport './CreatingEventButton.scss';\n\nexport const CreatingEventButton = () => {\n  const dispatch = useAppDispatch();\n  const isCreatingEvent = useAppSelector(state => state.calendar.isCreatingEvent);\n\n  const startCreatingNewEvent = () => {\n    dispatch(setEditedEvent(null));\n    dispatch(setIsCreatingEvent(true));\n  };\n\n  return (\n    <div className=\"creatingEventButton\">\n      <button\n        className=\"creatingEventButton__plusButton\"\n        onClick={() => startCreatingNewEvent()}\n        onKeyDown={() => startCreatingNewEvent()}\n        tabIndex={0}\n        type=\"button\"\n      >\n        +\n      </button>\n      {isCreatingEvent && <CreatingEventForm />}\n    </div>\n\n  );\n};\n","import React, { useEffect } from 'react';\nimport { CalendarGrid } from './components/CalendarGrid/CalendarGrid';\nimport { DateFilter } from './components/DateFilter/DateFilter';\nimport { getDataFromServer } from './utils/helpers/getDataFromServer';\nimport { getDateFilterFromLS } from './utils/helpers/getDateFilterFromLS';\nimport { useAppDispatch, useAppSelector } from './hook';\nimport { setDateFilter, setUserEvents } from './store/calendarSlice';\nimport { CreatingEventButton } from './components/CreatingEventButton/CreatingEventButton';\n\nimport './App.scss';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const dateFilter = useAppSelector(state => state.calendar.dateFilter);\n\n  useEffect(() => {\n    const eventsFromServer = getDataFromServer();\n    const dateFilterFromLS = getDateFilterFromLS();\n\n    dispatch(setUserEvents(eventsFromServer));\n    dispatch(setDateFilter(dateFilterFromLS));\n  }, []);\n\n  return (\n    dateFilter && (\n      <div className=\"app\">\n        <header className=\"app__header\">\n          <CreatingEventButton />\n          <DateFilter />\n        </header>\n        <main className=\"app__main\">\n          <CalendarGrid />\n        </main>\n        <a target=\"_blank\" href=\"https://icons8.com/\" className=\"resource\" rel=\"noreferrer\">Icons resource link</a>\n      </div>\n    )\n  );\n};\n","export function getDataFromServer() {\n  const dataFromServer = localStorage.getItem('events');\n  let preparedDate;\n\n  if (dataFromServer) {\n    preparedDate = JSON.parse(dataFromServer);\n  }\n\n  if (!dataFromServer) {\n    preparedDate = [];\n  }\n\n  return preparedDate;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport { App } from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}