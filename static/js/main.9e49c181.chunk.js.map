{"version":3,"sources":["store/calendarSlice.ts","store/index.ts","utils/helpers/getMonthNumberString.ts","utils/helpers/getDateWithTimeString.ts","utils/helpers/getDateString.ts","utils/helpers/getDayOfWeekNumber.tsx","utils/helpers/createDayObject.ts","utils/helpers/getDaysFromMonth.ts","hook.ts","utils/helpers/getCurrentTime.ts","utils/helpers/isNewlyCreatedEvent.ts","components/DayCell/DayCell.tsx","utils/helpers/checkIsThisDayIsToday.ts","utils/helpers/sortEventsByTime.ts","utils/helpers/sendDataToServer.ts","components/Forms/EditingEventForm/EditingEventForm.tsx","components/CalendarGrid/CalendarGrid.tsx","utils/helpers/getDaysListForCalendarGrid.ts","utils/helpers/setDateFilterToLS.ts","utils/helpers/getYearAndMonthFromDate.ts","utils/helpers/createDateFilter.ts","utils/helpers/createMonthObject.ts","utils/helpers/getMonthName.ts","components/DateFilter/DateFilter.tsx","utils/helpers/createSelectedMonthObject.ts","utils/helpers/getDateFilterFromLS.ts","utils/helpers/getInitialDateFilter.ts","components/Forms/CreatingEventForm/CreatingEventForm.tsx","components/CreatingEventButton/CreatingEventButton.tsx","App.tsx","utils/helpers/getDataFromServer.ts","index.tsx"],"names":["calendarSlice","createSlice","name","initialState","dateFilter","selectedMonth","userEvents","isCreatingEvent","editedEvent","reducers","setDateFilter","state","action","payload","setSelectedMonth","setUserEvents","setIsCreatingEvent","setEditedEvent","actions","store","configureStore","reducer","calendar","calendarReducer","getMonthNumberString","monthIndex","monthNumber","toFixed","length","getDateWithTimeString","date","year","getFullYear","getMonth","dayNumber","getDate","hours","getHours","minutes","getMinutes","monthNumberString","getDateString","dateObject","split","getDayOfWeekNumber","dayOfWeekName","createDayObject","dayDate","isFromSelectedMonth","undefined","dayDateString","toString","dayArray","monthName","dayOfWeekNumber","dateString","dayEvents","filter","event","beginDate","dayObject","getDaysFromMonth","month","kindOfMonth","needDayFromThisMonth","startNumber","lastNumber","daysFromMonth","daysAmount","i","dayObj","Date","push","useAppDispatch","useDispatch","useAppSelector","useSelector","getCurrentTime","JSON","stringify","slice","isNewlyCreatedEvent","currentTime","createdAtFull","DayCell","day","dispatch","isThisDayIsToday","checkIsThisDayIsToday","sortedDayEvents","sort","eventA","eventB","sumMinutesA","Infinity","sumMinutesB","beginTime","hoursA","minutesA","parseInt","hoursB","minutesB","eventSelectionHandler","className","cn","map","onClick","onKeyDown","role","tabIndex","title","id","sendDataToServer","updatedEvents","localStorage","setItem","EditingEventForm","useState","setTitle","description","setDescription","setBeginDate","setBeginTime","useEffect","closeForm","deleteEvent","onSubmit","preventDefault","updatedEvent","editedAt","notEditedEvents","userEvent","onKeyUp","createdAt","Stack","direction","spacing","LocalizationProvider","dateAdapter","AdapterDayjs","TextField","label","variant","required","color","value","onChange","e","target","multiline","DesktopDatePicker","inputFormat","beginDateString","$d","renderInput","inputProps","error","TimePicker","beginTimeString","params","Button","type","CalendarGrid","daysListForCalendar","daysFromCurrentMonth","needDaysFromPrevMonth","daysFromPreviousMonth","prevMonth","needDaysFromNextMonth","daysFromNextMonth","nextMonth","getDaysListForCalendarGrid","Math","random","setDateFilterToLS","newDateFilter","getYearAndMonthFromDate","createDateFilter","createMonthObject","getMonthName","monthShortName","monthFullName","fullDate","fullDateReverse","dateWithMonthName","DateFilter","initialValueForDatePicker","dayjs","datePicker","setDatePicker","isDatePicker","setIsDatePicker","minDate","maxDate","newSelectedMonth","selectedMonthDate","prevMonthDate","nextMonthDate","currentMonthObject","prevMonthObject","futureMonthObject","createSelectedMonthObject","nextMonthHandler","selectedMonthIndex","updatedDateFilter","prevMonthHandler","datePickerHandler","newDate","Grid","container","item","MonthPicker","YearPicker","getDateFilterFromLS","filtersFromLS","getItem","parse","CreatingEventForm","uniqueId","fullDateString","createdAtFullTime","newEvent","CreatingEventButton","startCreatingNewEvent","App","eventsFromServer","preparedDate","dataFromServer","getDataFromServer","dateFilterFromLS","href","rel","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9e49c181.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { IDateFilter } from '../types/IDateFilter';\nimport { IEvent } from '../types/IEvent';\nimport { IMonthSelected } from '../types/IMonthSelected';\n\ntype calendar = {\n  dateFilter: IDateFilter | null;\n  selectedMonth: IMonthSelected | null;\n  userEvents: IEvent[];\n  isCreatingEvent: boolean;\n  editedEvent: IEvent | null;\n};\n\nconst initialState: calendar = {\n  dateFilter: null,\n  selectedMonth: null,\n  userEvents: [],\n  isCreatingEvent: false,\n  editedEvent: null,\n};\n\nconst calendarSlice = createSlice({\n  name: 'calendar',\n  initialState,\n  reducers: {\n    setDateFilter(state, action: PayloadAction<IDateFilter>) {\n      state.dateFilter = action.payload;\n    },\n    setSelectedMonth(state, action: PayloadAction<IMonthSelected>) {\n      state.selectedMonth = action.payload;\n    },\n    setUserEvents(state, action: PayloadAction<IEvent[]>) {\n      state.userEvents = action.payload;\n    },\n    setIsCreatingEvent(state, action: PayloadAction<boolean>) {\n      state.isCreatingEvent = action.payload;\n    },\n    setEditedEvent(state, action: PayloadAction<IEvent | null>) {\n      state.editedEvent = action.payload;\n    },\n  },\n});\n\nexport const {\n  setDateFilter,\n  setSelectedMonth,\n  setUserEvents,\n  setIsCreatingEvent,\n  setEditedEvent,\n} = calendarSlice.actions;\n\nexport default calendarSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport calendarReducer from './calendarSlice';\n\nconst store = configureStore({\n  reducer: {\n    calendar: calendarReducer,\n  },\n});\n\nexport default store;\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","export function getMonthNumberString(monthIndex : number) {\n  const monthNumber = (monthIndex + 1).toFixed();\n\n  if (monthNumber.length > 1) {\n    return monthNumber;\n  }\n\n  return `0${monthNumber}`;\n}\n","import { getMonthNumberString } from './getMonthNumberString';\n\nexport function getDateWithTimeString(date: Date) {\n  const year = date.getFullYear();\n  const monthIndex = date.getMonth();\n  const dayNumber = date.getDate();\n  const hours = date.getHours();\n  const minutes = date.getMinutes();\n  const monthNumberString = getMonthNumberString(monthIndex);\n\n  const dateString = `${year}-${monthNumberString}-${dayNumber} ${hours}:${minutes}`;\n\n  return dateString;\n}\n","import { getDateWithTimeString } from './getDateWithTimeString';\n\nexport function getDateString(dateObject: Date) {\n  const fullDateWithTimeString = getDateWithTimeString(dateObject);\n  const dateString = fullDateWithTimeString.split(' ')[0];\n\n  return dateString;\n}\n","export function getDayOfWeekNumber(dayOfWeekName: string) {\n  switch (dayOfWeekName) {\n    case 'Mon':\n      return 1;\n    case 'Tue':\n      return 2;\n    case 'Wed':\n      return 3;\n    case 'Thu':\n      return 4;\n    case 'Fri':\n      return 5;\n    case 'Sat':\n      return 6;\n    case 'Sun':\n      return 7;\n    default:\n      return 1;\n  }\n}\n","import { IDay } from '../../types/IDay';\nimport { IEvent } from '../../types/IEvent';\nimport { getDateString } from './getDateString';\nimport { getDayOfWeekNumber } from './getDayOfWeekNumber';\nimport { getMonthNumberString } from './getMonthNumberString';\n\nexport function createDayObject(\n  dayDate: Date,\n  userEvents: IEvent[],\n  isFromSelectedMonth : boolean | undefined = undefined,\n): IDay {\n  const year = dayDate.getFullYear();\n  const dayNumber = dayDate.getDate();\n  const monthIndex = dayDate.getMonth();\n  const monthNumberString = getMonthNumberString(monthIndex);\n\n  const dayDateString = dayDate.toString();\n  const dayArray: string[] = dayDateString.split(' ');\n  const [dayOfWeekName, monthName] = dayArray;\n  const dayOfWeekNumber = getDayOfWeekNumber(dayOfWeekName);\n\n  const dateString = getDateString(dayDate);\n  const dayEvents = userEvents.filter((event: IEvent) => event.beginDate === dateString);\n\n  const dayObject = {\n    year,\n    monthIndex,\n    monthNumberString,\n    monthName,\n    dayNumber,\n    dayOfWeekNumber,\n    dayOfWeekName,\n    dateString,\n    dayEvents,\n    isFromSelectedMonth,\n  };\n\n  return dayObject;\n}\n","import { IDay } from '../../types/IDay';\nimport { IEvent } from '../../types/IEvent';\nimport { IMonth, IMonthSelected } from '../../types/IMonthSelected';\nimport { createDayObject } from './createDayObject';\n\nexport function getDaysFromMonth(\n  month: IMonth | IMonthSelected,\n  kindOfMonth: string,\n  needDayFromThisMonth: number,\n  userEvents: IEvent[],\n) {\n  let startNumber = 1;\n  let lastNumber = needDayFromThisMonth;\n  let { year } = month;\n  let isFromSelectedMonth = true;\n\n  const daysFromMonth: IDay[] = [];\n\n  if (kindOfMonth === 'previousMonth') {\n    isFromSelectedMonth = false;\n    startNumber = month.daysAmount - needDayFromThisMonth + 1;\n    lastNumber = month.daysAmount;\n\n    if (month.monthIndex === 11) {\n      year -= 1;\n    }\n  }\n\n  if (kindOfMonth === 'nextMonth') {\n    isFromSelectedMonth = false;\n    lastNumber = needDayFromThisMonth;\n\n    if (month.monthIndex === 0) {\n      year += 1;\n    }\n  }\n\n  for (let i = startNumber; i <= lastNumber; i += 1) {\n    const dayDate = new Date(year, +month.monthIndex, i);\n\n    const dayObj = createDayObject(dayDate, userEvents, isFromSelectedMonth);\n\n    daysFromMonth.push(dayObj);\n  }\n\n  return daysFromMonth;\n}\n","import { useDispatch, useSelector, TypedUseSelectorHook } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","export function getCurrentTime() {\n  const currentTime = JSON.stringify(new Date()).slice(0, 20);\n\n  return currentTime;\n}\n","import { IEvent } from '../../types/IEvent';\nimport { getCurrentTime } from './getCurrentTime';\n\nexport function isNewlyCreatedEvent(event: IEvent) {\n  const currentTime = getCurrentTime();\n\n  return event.createdAtFull === currentTime;\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { checkIsThisDayIsToday } from '../../utils/helpers/checkIsThisDayIsToday';\nimport { sortEventsByTime } from '../../utils/helpers/sortEventsByTime';\nimport { IDay } from '../../types/IDay';\nimport { IEvent } from '../../types/IEvent';\nimport { useAppDispatch } from '../../hook';\nimport { setEditedEvent, setIsCreatingEvent } from '../../store/calendarSlice';\nimport { isNewlyCreatedEvent } from '../../utils/helpers/isNewlyCreatedEvent';\n\nimport './DayCell.scss';\n\ninterface props {\n  day: IDay;\n}\n\nexport const DayCell: React.FC<props> = ({ day }) => {\n  const dispatch = useAppDispatch();\n\n  const isThisDayIsToday = checkIsThisDayIsToday(day);\n  const sortedDayEvents = sortEventsByTime(day.dayEvents);\n\n  const eventSelectionHandler = (event : IEvent) => {\n    dispatch(setIsCreatingEvent(false));\n    dispatch(setEditedEvent(event));\n  };\n\n  return (\n    <div className={cn(\n      'dayCell',\n      { 'dayCell--current': isThisDayIsToday },\n      { 'dayCell--notActual': !day.isFromSelectedMonth },\n      { 'dayCell--current--notActual': !day.isFromSelectedMonth && isThisDayIsToday },\n    )}\n    >\n      <header className=\"dayCell__header\">\n        <p className=\"dayCell__date\">{day.dayNumber}</p>\n        <p className=\"dayCell__dayOfWeek\">{day.dayOfWeekName}</p>\n      </header>\n      <main className=\"dayCell__main\">\n        {sortedDayEvents.map((event: IEvent) => {\n          return (\n\n            <div\n              key={event.id}\n              className={cn(\n                'dayCell__eventTitle',\n                { 'dayCell__eventTitle--new': isNewlyCreatedEvent(event) },\n                { 'dayCell__eventTitle--notActual': !day.isFromSelectedMonth },\n                {\n                  'dayCell__eventTitle--notActual--new':\n                  isNewlyCreatedEvent(event) && !day.isFromSelectedMonth,\n                },\n              )}\n              onClick={() => eventSelectionHandler(event)}\n              onKeyDown={() => eventSelectionHandler(event)}\n              role=\"button\"\n              tabIndex={0}\n            >\n              {event.title}\n            </div>\n          );\n        })}\n      </main>\n    </div>\n  );\n};\n","import { IDay } from '../../types/IDay';\nimport { createDayObject } from './createDayObject';\n\nexport function checkIsThisDayIsToday(day: IDay) {\n  const todayDayDate = new Date();\n  const todayDayObject = createDayObject(todayDayDate, []);\n  const todayDateString = todayDayObject.dateString;\n  const selectedDayDateString = day.dateString;\n\n  return todayDateString === selectedDayDateString;\n}\n","import { IEvent } from '../../types/IEvent';\n\nexport function sortEventsByTime(dayEvents: IEvent[]) {\n  const sortedEvents = dayEvents.sort((eventA, eventB) => {\n    let sumMinutesA = Infinity;\n    let sumMinutesB = Infinity;\n\n    if (eventA.beginTime) {\n      const [hoursA, minutesA] = eventA.beginTime.split(' ')[1].split(':');\n\n      sumMinutesA = parseInt(hoursA, 10) * 60 + parseInt(minutesA, 10);\n    }\n\n    if (eventB.beginTime) {\n      const [hoursB, minutesB] = eventB.beginTime.split(' ')[1].split(':');\n\n      sumMinutesB = parseInt(hoursB, 10) * 60 + parseInt(minutesB, 10);\n    }\n\n    return sumMinutesA - sumMinutesB;\n  });\n\n  return sortedEvents;\n}\n","import { IEvent } from '../../types/IEvent';\n\nexport function sendDataToServer(updatedEvents: IEvent[]) {\n  localStorage.setItem('events', JSON.stringify(updatedEvents));\n}\n","import React, { useState, useEffect } from 'react';\nimport TextField from '@mui/material/TextField';\nimport { TimePicker } from '@mui/x-date-pickers/TimePicker';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { DesktopDatePicker } from '@mui/x-date-pickers/DesktopDatePicker';\nimport { useDispatch } from 'react-redux';\nimport { getDateWithTimeString } from '../../../utils/helpers/getDateWithTimeString';\nimport { sendDataToServer } from '../../../utils/helpers/sendDataToServer';\nimport { useAppSelector } from '../../../hook';\nimport { setUserEvents, setEditedEvent } from '../../../store/calendarSlice';\nimport { IEvent } from '../../../types/IEvent';\nimport { getDateString } from '../../../utils/helpers/getDateString';\n\nimport './EditingEventForm.scss';\n\ninterface props {\n  editedEvent: IEvent\n}\n\nexport const EditingEventForm: React.FC<props> = ({ editedEvent }) => {\n  const dispatch = useDispatch();\n  const userEvents = useAppSelector(state => state.calendar.userEvents);\n  const [title, setTitle] = useState(editedEvent.title);\n  const [description, setDescription] = useState(editedEvent.description);\n  const [beginDate, setBeginDate] = useState(editedEvent.beginDate);\n  const [beginTime, setBeginTime] = useState(editedEvent.beginTime);\n\n  useEffect(() => {\n    setTitle(editedEvent.title);\n    setDescription(editedEvent.description);\n    setBeginDate(editedEvent.beginDate);\n    setBeginTime(editedEvent.beginTime);\n  }, [editedEvent]);\n\n  const closeForm = () => {\n    dispatch(setEditedEvent(null));\n  };\n\n  const handleSubmit = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n\n    const dateString = getDateWithTimeString(new Date());\n\n    const updatedEvent: IEvent = {\n      ...editedEvent,\n      title,\n      description,\n      editedAt: dateString,\n      beginDate,\n      beginTime,\n    };\n\n    const notEditedEvents = userEvents\n      .filter(userEvent => userEvent.id !== editedEvent.id);\n\n    const updatedEvents: IEvent[] = [...notEditedEvents, updatedEvent];\n\n    dispatch(setUserEvents(updatedEvents));\n    sendDataToServer(updatedEvents);\n\n    closeForm();\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const datePickerHandler = (date: any) => {\n    if (date) {\n      const beginDateString = getDateString(date.$d);\n\n      setBeginDate(beginDateString);\n    }\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const timePickerHandler = (date: any) => {\n    if (date) {\n      const beginTimeString = getDateWithTimeString(date.$d);\n\n      setBeginTime(beginTimeString);\n    }\n  };\n\n  const deleteEvent = () => {\n    const updatedEvents = userEvents.filter(event => event.id !== editedEvent.id);\n\n    dispatch(setUserEvents(updatedEvents));\n    sendDataToServer(updatedEvents);\n\n    closeForm();\n  };\n\n  return (\n    <form className=\"editingEventForm\" onSubmit={handleSubmit}>\n      <div className=\"editingEventForm__header\">\n        <div className=\"editingEventForm__buttons\">\n          <div\n            className=\"editingEventForm__bin\"\n            onClick={() => deleteEvent()}\n            onKeyUp={() => deleteEvent()}\n            tabIndex={0}\n            role=\"button\"\n          >\n          </div>\n          <div\n            className=\"editingEventForm__close\"\n            onClick={() => closeForm()}\n            onKeyUp={() => closeForm()}\n            tabIndex={0}\n            role=\"button\"\n          >\n          </div>\n        </div>\n        <h2 className=\"editingEventForm__formTitle\">\n          Edit event\n        </h2>\n        <p className=\"editingEventForm__createdAt\">\n          Created at:&nbsp;\n          {editedEvent.createdAt}\n        </p>\n        {\n          editedEvent.editedAt\n        && (\n          <p className=\"editingEventForm__updatedAt\">\n            Last updated at:&nbsp;\n            {editedEvent.editedAt}\n          </p>\n        )\n        }\n      </div>\n      <div className=\"editingEventForm__main\">\n        <Stack direction=\"column\" spacing={2}>\n          <LocalizationProvider dateAdapter={AdapterDayjs}>\n            <Stack spacing={1}>\n              <TextField\n                id=\"outlined-basic\"\n                label=\"Title\"\n                variant=\"outlined\"\n                required\n                color=\"secondary\"\n                value={title}\n                onChange={(e) => setTitle(e.target.value)}\n              />\n              <TextField\n                id=\"outlined-basic\"\n                label=\"Description\"\n                variant=\"outlined\"\n                multiline\n                color=\"secondary\"\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n              />\n              <DesktopDatePicker\n                label=\"Date\"\n                inputFormat=\"DD/MM/YYYY\"\n                value={beginDate}\n                onChange={datePickerHandler}\n                renderInput={(inputProps) => (\n                  <TextField\n                    {...inputProps}\n                    required\n                    error={false}\n                    color=\"secondary\"\n                  />\n                )}\n              />\n              <TimePicker\n                label=\"Time\"\n                value={beginTime}\n                onChange={timePickerHandler}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    error={false}\n                    color=\"secondary\"\n                  />\n                )}\n              />\n\n            </Stack>\n          </LocalizationProvider>\n          <Button variant=\"contained\" color=\"secondary\" type=\"submit\">\n            Save\n          </Button>\n        </Stack>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { getDaysListForCalendarGrid } from '../../utils/helpers/getDaysListForCalendarGrid';\nimport { useAppSelector } from '../../hook';\nimport { IDay } from '../../types/IDay';\nimport { DayCell } from '../DayCell/DayCell';\nimport { EditingEventForm } from '../Forms/EditingEventForm/EditingEventForm';\n\nimport './CalendarGrid.scss';\n\nexport const CalendarGrid = () => {\n  const selectedMonth = useAppSelector(state => state.calendar.selectedMonth);\n  const userEvents = useAppSelector(state => state.calendar.userEvents);\n  const editedEvent = useAppSelector(state => state.calendar.editedEvent);\n  const daysListForCalendar = getDaysListForCalendarGrid(selectedMonth, userEvents);\n\n  return (\n    <ul className=\"calendarGrid\">\n      {\n        editedEvent\n        && (<EditingEventForm editedEvent={editedEvent} />)\n      }\n      {daysListForCalendar.map((day: IDay) => {\n        return (\n          <li key={Math.random()} className=\"calendarGrid__dayCell\">\n            <DayCell day={day} />\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","import { IEvent } from '../../types/IEvent';\nimport { IMonthSelected } from '../../types/IMonthSelected';\nimport { getDaysFromMonth } from './getDaysFromMonth';\n\nconst daysAmountInCalendar = 42;\n\nexport function getDaysListForCalendarGrid(\n  selectedMonth: IMonthSelected | null,\n  userEvents: IEvent[],\n) {\n  if (!selectedMonth) {\n    return [];\n  }\n\n  const daysFromCurrentMonth = getDaysFromMonth(\n    selectedMonth,\n    'selectedMonth',\n    selectedMonth.daysAmount,\n    userEvents,\n  );\n\n  const firstDayOfWeekOfCurrentMonth = daysFromCurrentMonth[0].dayOfWeekNumber;\n  const needDaysFromPrevMonth = firstDayOfWeekOfCurrentMonth - 1;\n\n  const daysFromPreviousMonth = getDaysFromMonth(\n    selectedMonth.prevMonth,\n    'previousMonth',\n    needDaysFromPrevMonth,\n    userEvents,\n  );\n\n  const needDaysFromNextMonth\n  = daysAmountInCalendar - daysFromCurrentMonth.length - daysFromPreviousMonth.length;\n\n  const daysFromNextMonth = getDaysFromMonth(\n    selectedMonth.nextMonth,\n    'nextMonth',\n    needDaysFromNextMonth,\n    userEvents,\n  );\n\n  const daysList = [...daysFromPreviousMonth, ...daysFromCurrentMonth, ...daysFromNextMonth];\n\n  return daysList;\n}\n","import { IDateFilter } from '../../types/IDateFilter';\n\nexport function setDateFilterToLS(newDateFilter: IDateFilter) {\n  localStorage.setItem('dateFilter', JSON.stringify(newDateFilter));\n}\n","export function getYearAndMonthFromDate(date: Date) {\n  const year = date.getFullYear();\n  const monthIndex = date.getMonth();\n\n  return { year, monthIndex };\n}\n","import { getYearAndMonthFromDate } from './getYearAndMonthFromDate';\n\nexport function createDateFilter(year: number, monthIndex: number) {\n  const date = new Date(year, monthIndex);\n  const dateFilter = getYearAndMonthFromDate(date);\n\n  return dateFilter;\n}\n","import { IMonth } from '../../types/IMonthSelected';\nimport { getMonthName } from './getMonthName';\nimport { getMonthNumberString } from './getMonthNumberString';\n\nexport function createMonthObject(date: Date): IMonth {\n  const year = date.getFullYear();\n  const monthIndex = date.getMonth();\n  const monthNumber = monthIndex + 1;\n  const monthNumberString = getMonthNumberString(monthIndex);\n  const [monthShortName, monthFullName] = getMonthName(monthIndex);\n  const daysAmount = date.getDate();\n  const fullDate = `01/${monthNumberString}/${year}`;\n  const fullDateReverse = `${year}-${monthNumberString}-01`;\n  const dateWithMonthName = `${monthFullName} ${year}`;\n\n  return {\n    year,\n    monthIndex,\n    monthNumber,\n    monthShortName,\n    monthFullName,\n    fullDate,\n    fullDateReverse,\n    dateWithMonthName,\n    daysAmount,\n  };\n}\n","export function getMonthName(monthIndex: number) {\n  switch (monthIndex) {\n    case 0:\n      return ['Jan', 'January'];\n    case 1:\n      return ['Feb', 'February'];\n    case 2:\n      return ['Mar', 'March'];\n    case 3:\n      return ['Apr', 'April'];\n    case 4:\n      return ['May', 'May'];\n    case 5:\n      return ['Jun', 'June'];\n    case 6:\n      return ['Jul', 'July'];\n    case 7:\n      return ['Aug', 'August'];\n    case 8:\n      return ['Sep', 'September'];\n    case 9:\n      return ['Oct', 'October'];\n    case 10:\n      return ['Nov', 'November'];\n    case 11:\n      return ['Dec', 'December'];\n    default:\n      return 'uknown';\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport dayjs, { Dayjs } from 'dayjs';\nimport Grid from '@mui/material/Grid';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { MonthPicker } from '@mui/x-date-pickers/MonthPicker';\nimport { YearPicker } from '@mui/x-date-pickers/YearPicker';\nimport { setDateFilterToLS } from '../../utils/helpers/setDateFilterToLS';\nimport { useAppDispatch, useAppSelector } from '../../hook';\nimport { setDateFilter, setSelectedMonth } from '../../store/calendarSlice';\nimport { createDateFilter } from '../../utils/helpers/createDateFilter';\nimport { createSelectedMonthObject } from '../../utils/helpers/createSelectedMonthObject';\n\nimport './DateFilter.scss';\n\nexport const DateFilter = () => {\n  const dispatch = useAppDispatch();\n  const dateFilter = useAppSelector(state => state.calendar.dateFilter);\n  const selectedMonth = useAppSelector(state => state.calendar.selectedMonth);\n\n  const initialValueForDatePicker = selectedMonth ? selectedMonth.fullDateReverse : null;\n  const [datePicker, setDatePicker] = useState<Dayjs | null>(dayjs(initialValueForDatePicker));\n  const [isDatePicker, setIsDatePicker] = useState(false);\n  const minDate = dayjs('2020-01-01T00:00:00.000');\n  const maxDate = dayjs('2034-01-01T00:00:00.000');\n\n  useEffect(() => {\n    if (dateFilter) {\n      const newSelectedMonth = createSelectedMonthObject(dateFilter);\n\n      setDatePicker(dayjs(newSelectedMonth.fullDateReverse));\n      dispatch(setSelectedMonth(newSelectedMonth));\n    }\n  }, [dateFilter]);\n\n  const nextMonthHandler = () => {\n    if (dateFilter) {\n      const selectedMonthIndex = dateFilter.monthIndex;\n      const selectedYear = dateFilter.year;\n\n      const updatedDateFilter = createDateFilter(selectedYear, selectedMonthIndex + 1);\n\n      dispatch(setDateFilter(updatedDateFilter));\n      setDateFilterToLS(updatedDateFilter);\n    }\n  };\n\n  const prevMonthHandler = () => {\n    if (dateFilter) {\n      const selectedMonthIndex = dateFilter.monthIndex;\n      const selectedYear = dateFilter.year;\n\n      const updatedDateFilter = createDateFilter(selectedYear, selectedMonthIndex - 1);\n\n      dispatch(setDateFilter(updatedDateFilter));\n      setDateFilterToLS(updatedDateFilter);\n    }\n  };\n\n  const datePickerHandler = (newDate: Dayjs) => {\n    if (newDate) {\n      const year = newDate.year();\n      const month = newDate.month();\n\n      const updatedDateFilter = createDateFilter(year, month);\n\n      setDatePicker(newDate);\n      dispatch(setDateFilter(updatedDateFilter));\n      setDateFilterToLS(updatedDateFilter);\n    }\n  };\n\n  return (\n    selectedMonth && (\n      <div className=\"dateFilter\">\n        <div\n          className=\"dateFilter__arrow dateFilter__arrow--left\"\n          onClick={() => prevMonthHandler()}\n          onKeyUp={() => prevMonthHandler()}\n          tabIndex={0}\n          role=\"button\"\n        >\n        </div>\n        <p className=\"dateFilter__selectedDate\">{selectedMonth.dateWithMonthName}</p>\n        <div\n          className=\"dateFilter__arrow dateFilter__arrow--right\"\n          onClick={() => nextMonthHandler()}\n          onKeyUp={() => nextMonthHandler()}\n          tabIndex={0}\n          role=\"button\"\n        >\n        </div>\n        <div\n          className=\"dateFilter__calendarImage\"\n          onClick={() => setIsDatePicker(!isDatePicker)}\n          onKeyUp={() => setIsDatePicker(!isDatePicker)}\n          tabIndex={0}\n          role=\"button\"\n        >\n        </div>\n        <div className=\"dateFilter__datePicker\">\n          {isDatePicker && (\n            <LocalizationProvider dateAdapter={AdapterDayjs}>\n              <Grid container spacing={3}>\n                <Grid item>\n                  <MonthPicker\n                    date={datePicker}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onChange={(newDate) => datePickerHandler(newDate)}\n                  />\n                </Grid>\n                <Grid item>\n                  <YearPicker\n                    date={datePicker}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onChange={(newDate) => datePickerHandler(newDate)}\n                  />\n                </Grid>\n              </Grid>\n            </LocalizationProvider>\n          )}\n        </div>\n      </div>\n    )\n  );\n};\n","import { IDateFilter } from '../../types/IDateFilter';\nimport { IMonthSelected } from '../../types/IMonthSelected';\nimport { createMonthObject } from './createMonthObject';\n\nexport function createSelectedMonthObject(dateFilter: IDateFilter): IMonthSelected {\n  const { year, monthIndex } = dateFilter;\n\n  const selectedMonthDate = new Date(year, monthIndex + 1, 0);\n  const prevMonthDate = new Date(year, monthIndex, 0);\n  const nextMonthDate = new Date(year, monthIndex + 2, 0);\n\n  const currentMonthObject = createMonthObject(selectedMonthDate);\n  const prevMonthObject = createMonthObject(prevMonthDate);\n  const futureMonthObject = createMonthObject(nextMonthDate);\n\n  const selectedMonth = {\n    ...currentMonthObject,\n    prevMonth: prevMonthObject,\n    nextMonth: futureMonthObject,\n  };\n\n  return selectedMonth;\n}\n","import { getInitialDateFilter } from './getInitialDateFilter';\n\nexport function getDateFilterFromLS() {\n  const filtersFromLS = localStorage.getItem('dateFilter');\n\n  if (filtersFromLS) {\n    return JSON.parse(filtersFromLS);\n  }\n\n  const initialDateFilter = getInitialDateFilter();\n\n  return initialDateFilter;\n}\n","import { getYearAndMonthFromDate } from './getYearAndMonthFromDate';\n\nexport function getInitialDateFilter() {\n  const todayDate = new Date();\n  const todayYearAndMonth = getYearAndMonthFromDate(todayDate);\n\n  return todayYearAndMonth;\n}\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport TextField from '@mui/material/TextField';\nimport { TimePicker } from '@mui/x-date-pickers/TimePicker';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { DesktopDatePicker } from '@mui/x-date-pickers/DesktopDatePicker';\nimport { getDateWithTimeString } from '../../../utils/helpers/getDateWithTimeString';\nimport { sendDataToServer } from '../../../utils/helpers/sendDataToServer';\nimport { useAppSelector } from '../../../hook';\nimport { IEvent } from '../../../types/IEvent';\nimport { setIsCreatingEvent, setUserEvents } from '../../../store/calendarSlice';\nimport { getDateString } from '../../../utils/helpers/getDateString';\nimport { getCurrentTime } from '../../../utils/helpers/getCurrentTime';\n\nimport './CreatingEventForm.scss';\n\nexport const CreatingEventForm = () => {\n  const dispatch = useDispatch();\n  const userEvents = useAppSelector(state => state.calendar.userEvents);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [beginDate, setBeginDate] = useState<string>('');\n  const [beginTime, setBeginTime] = useState<string>('');\n\n  const closeForm = () => {\n    dispatch(setIsCreatingEvent(false));\n  };\n\n  const handleSubmit = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n\n    const uniqueId = `id${Math.random().toString(16).slice(2)}`;\n    const fullDateString = getDateWithTimeString(new Date());\n    const createdAtFullTime = getCurrentTime();\n\n    const newEvent = {\n      id: uniqueId,\n      title,\n      description,\n      createdAt: fullDateString,\n      createdAtFull: createdAtFullTime,\n      beginDate,\n      beginTime,\n      editedAt: null,\n    };\n\n    const updatedEvents: IEvent[] = [...userEvents, newEvent];\n\n    dispatch(setUserEvents(updatedEvents));\n    sendDataToServer(updatedEvents);\n\n    closeForm();\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const datePickerHandler = (date: any) => {\n    if (date) {\n      const beginDateString = getDateString(date.$d);\n\n      setBeginDate(beginDateString);\n    }\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const dateTimeHandler = (date: any) => {\n    if (date) {\n      const beginTimeString = getDateWithTimeString(date.$d);\n\n      setBeginTime(beginTimeString);\n    }\n  };\n\n  return (\n    <form className=\"creatingEventForm\" onSubmit={handleSubmit}>\n      <div className=\"creatingEventForm__header\">\n        <div\n          className=\"creatingEventForm__closeButton\"\n          onClick={() => closeForm()}\n          onKeyUp={() => closeForm()}\n          tabIndex={0}\n          role=\"button\"\n        >\n        </div>\n        <h2 className=\"creatingEventForm__formTitle\">\n          Add new event\n        </h2>\n      </div>\n      <div className=\"creatingEventForm__main\">\n        <Stack direction=\"column\" spacing={2}>\n          <LocalizationProvider dateAdapter={AdapterDayjs}>\n            <Stack spacing={1}>\n              <TextField\n                id=\"outlined-basic\"\n                label=\"Title\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                required\n                onChange={(e) => setTitle(e.target.value)}\n              />\n              <TextField\n                id=\"outlined-basic\"\n                label=\"Description\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                multiline\n                onChange={(e) => setDescription(e.target.value)}\n              />\n              <DesktopDatePicker\n                label=\"Date\"\n                inputFormat=\"DD/MM/YYYY\"\n                value={beginDate}\n                onChange={datePickerHandler}\n                renderInput={(inputProps) => (\n                  <TextField\n                    {...inputProps}\n                    required\n                    error={false}\n                    color=\"secondary\"\n                  />\n                )}\n              />\n              <TimePicker\n                label=\"Time\"\n                value={beginTime}\n                onChange={dateTimeHandler}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    error={false}\n                    color=\"secondary\"\n                  />\n                )}\n              />\n            </Stack>\n          </LocalizationProvider>\n          <Button variant=\"contained\" color=\"secondary\" type=\"submit\">\n            Save\n          </Button>\n        </Stack>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../hook';\nimport { setEditedEvent, setIsCreatingEvent } from '../../store/calendarSlice';\nimport { CreatingEventForm } from '../Forms/CreatingEventForm/CreatingEventForm';\n\nimport './CreatingEventButton.scss';\n\nexport const CreatingEventButton = () => {\n  const dispatch = useAppDispatch();\n  const isCreatingEvent = useAppSelector(state => state.calendar.isCreatingEvent);\n\n  const startCreatingNewEvent = () => {\n    dispatch(setEditedEvent(null));\n    dispatch(setIsCreatingEvent(true));\n  };\n\n  return (\n    <div className=\"creatingEventButton\">\n      <button\n        className=\"creatingEventButton__plusButton\"\n        onClick={() => startCreatingNewEvent()}\n        onKeyDown={() => startCreatingNewEvent()}\n        tabIndex={0}\n        type=\"button\"\n      >\n        +\n      </button>\n      {isCreatingEvent && <CreatingEventForm />}\n    </div>\n\n  );\n};\n","import React, { useEffect } from 'react';\nimport { CalendarGrid } from './components/CalendarGrid/CalendarGrid';\nimport { DateFilter } from './components/DateFilter/DateFilter';\nimport { getDataFromServer } from './utils/helpers/getDataFromServer';\nimport { getDateFilterFromLS } from './utils/helpers/getDateFilterFromLS';\nimport { useAppDispatch, useAppSelector } from './hook';\nimport { setDateFilter, setUserEvents } from './store/calendarSlice';\nimport { CreatingEventButton } from './components/CreatingEventButton/CreatingEventButton';\n\nimport './App.scss';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const dateFilter = useAppSelector(state => state.calendar.dateFilter);\n\n  useEffect(() => {\n    const eventsFromServer = getDataFromServer();\n    const dateFilterFromLS = getDateFilterFromLS();\n\n    dispatch(setUserEvents(eventsFromServer));\n    dispatch(setDateFilter(dateFilterFromLS));\n  }, []);\n\n  return (\n    dateFilter && (\n      <div className=\"app\">\n        <div className=\"app__container\">\n          <header className=\"app__header\">\n            <CreatingEventButton />\n            <DateFilter />\n          </header>\n          <main className=\"app__main\">\n            <CalendarGrid />\n          </main>\n        </div>\n        <a target=\"_blank\" href=\"https://icons8.com/\" className=\"resource\" rel=\"noreferrer\">Icons resource link</a>\n      </div>\n    )\n  );\n};\n","export function getDataFromServer() {\n  const dataFromServer = localStorage.getItem('events');\n  let preparedDate;\n\n  if (dataFromServer) {\n    preparedDate = JSON.parse(dataFromServer);\n  }\n\n  if (!dataFromServer) {\n    preparedDate = [];\n  }\n\n  return preparedDate;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport { App } from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}